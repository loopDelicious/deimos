{
  "collection": {
    "info": {
      "id": "4e3f4445-375f-4529-aa49-9b576e6c83c3",
      "name": "Postman Echo",
      "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "event": [],
    "variable": [],
    "item": [
      {
        "id": "c97f3091-a8c7-47f5-8d3d-f07a6f78cf38",
        "name": "Request Methods",
        "description": {
          "content": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c85cfd9d-b8c3-4e06-b573-be32ddd4c340",
            "name": "GET Request",
            "request": {
              "url": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with request queries\", function () {",
                    "    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
                    "        .and.have.jsonBody('args.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "801055ab-f60c-48b6-ae03-e3e7749691e3"
                }
              }
            ]
          },
          {
            "id": "5586f942-4ad7-487a-9ead-227bf1f57089",
            "name": "POST Raw Text",
            "request": {
              "url": "https://postman-echo.com/post",
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              },
              "description": {
                "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with request body\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "29bb5ff9-a984-4cdb-a098-4c57a0f9323e"
                }
              }
            ]
          },
          {
            "id": "6cb86b28-b49a-4996-819b-6e8509e87e49",
            "name": "POST Form Data",
            "request": {
              "url": "https://postman-echo.com/post",
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "foo1",
                    "value": "bar1"
                  },
                  {
                    "key": "foo2",
                    "value": "bar2"
                  }
                ]
              },
              "description": {
                "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
                    "        .and.have.jsonBody('form.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "7016cb36-a5a9-4015-b8a4-d199e7cfb964"
                }
              }
            ]
          },
          {
            "id": "e4dc4532-dbb0-4ecc-832b-46baad0049ba",
            "name": "PUT Request",
            "request": {
              "url": "https://postman-echo.com/put",
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              },
              "description": {
                "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "214a0a33-0da2-4581-ae67-0ec9cf182798"
                }
              }
            ]
          },
          {
            "id": "5b96576a-5dc2-4616-a753-d7b40a8597cd",
            "name": "PATCH Request",
            "request": {
              "url": "https://postman-echo.com/patch",
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              },
              "description": {
                "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "cec2b021-058b-4bb9-9976-7c199fafddd0"
                }
              }
            ]
          },
          {
            "id": "7be6f0bd-ab22-41fc-9825-b2b7b0ba2d80",
            "name": "DELETE Request",
            "request": {
              "url": "https://postman-echo.com/delete",
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              },
              "description": {
                "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "621a830e-1b76-4bd5-8e4a-6cca6e157f2a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a83590da-c93a-4a02-b0e1-a52773eb381e",
        "name": "Headers",
        "description": {
          "content": "The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.\n\nHTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "02d0d143-d95d-426c-878a-95d1a4ca3295",
            "name": "Request Headers",
            "request": {
              "url": "https://postman-echo.com/headers",
              "method": "GET",
              "header": [
                {
                  "key": "my-sample-header",
                  "value": "Lorem ipsum dolor sit amet"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "6422f749-0496-4e91-9986-df33d898e5a7",
                "name": "my-sample-header",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/headers",
                  "method": "GET",
                  "header": [
                    {
                      "key": "my-sample-header",
                      "value": "Lorem ipsum dolor sit amet"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "342"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:14:00 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate, sdch\",\"accept-language\":\"en-US,en;q=0.8\",\"cache-control\":\"no-cache\",\"my-sample-header\":\"Lorem ipsum dolor sit amet\",\"postman-token\":\"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"}}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// we check to ensire that the headers we sent as request is returned as part of",
                    "// the response body. if you change the request headers, make sure to add them",
                    "// to the tests here",
                    "pm.test(\"sample request header should be returned in response body\", function () {",
                    "    pm.response.to.have.jsonBody('headers.my-sample-header', 'Lorem ipsum dolor sit amet');",
                    "});"
                  ],
                  "_lastExecutionId": "224b9283-4504-4959-8845-c55ecbb130c1"
                }
              }
            ]
          },
          {
            "id": "93f8cb2f-4884-468b-9092-534a314ca2cd",
            "name": "Response Headers",
            "request": {
              "url": "https://postman-echo.com/response-headers?foo1=bar1&foo2=bar2",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "html"
                },
                "id": "a5756913-8d1e-46d8-8b06-b31b8c369abd",
                "name": "Response headers",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/response-headers?Content-Type=text/html&test=response_headers",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "71"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "text/html; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:14:18 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  },
                  {
                    "name": "test",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "test",
                    "value": "response_headers"
                  }
                ],
                "body": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has the headers sent as part of request query\", function () {",
                    "    pm.response.to.have.header('foo1', 'bar1')",
                    "        .and.have.header('foo2', 'bar2');",
                    "});",
                    "",
                    "pm.test(\"sample request param should be returned in response body\", function () {",
                    "    pm.response.to.have.jsonBody('foo1', 'bar1')",
                    "        .and.have.jsonBody('foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "c429cdb8-77cc-48c2-b359-3c9815ac2e92"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
        "name": "Authentication Methods",
        "item": [
          {
            "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
            "name": "Basic Auth",
            "request": {
              "url": "https://postman-echo.com/basic-auth",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "basic",
                "basic": {}
              },
              "description": {
                "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                "name": "200",
                "originalRequest": {
                  "url": "",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "42"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"authenticated\":true}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying 'authenticated'\", function () {",
                    "    pm.response.to.have.jsonBody('authenticated', true);",
                    "});"
                  ],
                  "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                }
              }
            ]
          },
          {
            "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
            "name": "DigestAuth Success",
            "request": {
              "url": "https://postman-echo.com/digest-auth",
              "method": "GET",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                }
              ],
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "auth": {
                "type": "digest",
                "digest": {}
              },
              "description": {
                "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                "name": "200",
                "originalRequest": {
                  "url": "",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "42"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"authenticated\":true}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "tests[\"response code is 200\"] = responseCode.code === 200;",
                    "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                  ],
                  "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                }
              }
            ]
          },
          {
            "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
            "name": "Hawk Auth",
            "request": {
              "url": "https://postman-echo.com/auth/hawk",
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "access_token",
                    "value": "xyz1",
                    "type": "text"
                  },
                  {
                    "key": "id",
                    "value": "U1",
                    "type": "text"
                  },
                  {
                    "key": "server_secret",
                    "value": "zeppelin",
                    "type": "text"
                  },
                  {
                    "key": "admin",
                    "value": "true",
                    "type": "text"
                  }
                ]
              },
              "auth": {
                "type": "hawk",
                "hawk": {}
              },
              "description": {
                "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                "name": "Success",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/auth/hawk",
                  "method": "GET",
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                    }
                  ],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "access_token",
                        "value": "xyz1",
                        "type": "text"
                      },
                      {
                        "key": "id",
                        "value": "U1",
                        "type": "text"
                      },
                      {
                        "key": "server_secret",
                        "value": "zeppelin",
                        "type": "text"
                      },
                      {
                        "key": "admin",
                        "value": "true",
                        "type": "text"
                      }
                    ]
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Server-Authorization",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server-Authorization",
                    "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                "cookie": [
                  {
                    "name": "getpostmanlogin",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "yes"
                  },
                  {
                    "name": "postman.sid",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                  },
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying passed 'status'\", function () {",
                    "    pm.response.to.have.jsonBody('status', 'pass');",
                    "});"
                  ],
                  "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                }
              }
            ]
          },
          {
            "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
            "name": "OAuth1.0 (verify signature)",
            "request": {
              "url": "https://postman-echo.com/oauth1",
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "code",
                    "value": "xWnkliVQJURqB2x1",
                    "type": "text"
                  },
                  {
                    "key": "grant_type",
                    "value": "authorization_code",
                    "type": "text"
                  },
                  {
                    "key": "redirect_uri",
                    "value": "https://www.getpostman.com/oauth2/callback",
                    "type": "text"
                  },
                  {
                    "key": "client_id",
                    "value": "abc123",
                    "type": "text"
                  },
                  {
                    "key": "client_secret",
                    "value": "ssh-secret",
                    "type": "text"
                  }
                ]
              },
              "auth": {
                "type": "oauth1",
                "oauth1": {}
              },
              "description": {
                "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                "name": "401",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/oauth1",
                  "method": "GET",
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                    }
                  ],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "code",
                        "value": "xWnkliVQJURqB2x1",
                        "type": "text"
                      },
                      {
                        "key": "grant_type",
                        "value": "authorization_code",
                        "type": "text"
                      },
                      {
                        "key": "redirect_uri",
                        "value": "https://www.getpostman.com/oauth2/callback",
                        "type": "text"
                      },
                      {
                        "key": "client_id",
                        "value": "abc123",
                        "type": "text"
                      },
                      {
                        "key": "client_secret",
                        "value": "ssh-secret",
                        "type": "text"
                      }
                    ]
                  }
                },
                "status": "Unauthorized",
                "code": 401,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "536"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.8.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                "name": "200",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/oauth1",
                  "method": "GET",
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                    }
                  ],
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "code",
                        "value": "xWnkliVQJURqB2x1",
                        "type": "text"
                      },
                      {
                        "key": "grant_type",
                        "value": "authorization_code",
                        "type": "text"
                      },
                      {
                        "key": "redirect_uri",
                        "value": "https://www.getpostman.com/oauth2/callback",
                        "type": "text"
                      },
                      {
                        "key": "client_id",
                        "value": "abc123",
                        "type": "text"
                      },
                      {
                        "key": "client_secret",
                        "value": "ssh-secret",
                        "type": "text"
                      }
                    ]
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "95"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.8.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying passed 'status'\", function () {",
                    "    pm.response.to.have.jsonBody('status', 'pass');",
                    "});"
                  ],
                  "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9b1df5d2-92e5-4083-92d0-bf5f468a7b13",
        "name": "Cookie Manipulation",
        "description": {
          "content": "The cookie related endpoints allow one to get, set and delete simple cookies.\n\nCookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.\nIf you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "4c923e62-57c8-4bb7-9110-35be96d8fec8",
            "name": "Set Cookies",
            "request": {
              "url": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "dc82d006-142f-4ca1-acfa-2f8ad5dd3e62",
                "name": "Cookies",
                "originalRequest": {
                  "url": "",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "51"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:15:28 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('response should be 200 or 302', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                    "});",
                    "",
                    "// response code could be either a 200 or a redirection based on the settings of ",
                    "// the http client. hence we need to handle both cases",
                    "pm.test('response body should be valid', function () {",
                    "    if (pm.response.code === 200) {",
                    "        pm.response.to.have.jsonBody('cookies.foo1', 'bar1')",
                    "            .and.have.jsonBody('cookies.foo2', 'bar2');",
                    "    }",
                    "    else {",
                    "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "85062525-fdf8-4131-a2e5-81aff02be93f"
                }
              }
            ]
          },
          {
            "id": "4489ffa9-23cd-47ae-962a-d68489799d61",
            "name": "Get Cookies",
            "request": {
              "url": "https://postman-echo.com/cookies",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "29f4eb7e-5a20-4e30-b6c3-18828f6926e1",
                "name": "Cookies",
                "originalRequest": {
                  "url": "",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "46"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:16:29 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                    "});",
                    "",
                    "pm.test('response body should be valid', function () {",
                    "    pm.response.to.have.jsonBody('cookies.foo1', 'bar1');",
                    "    pm.response.to.have.jsonBody('cookies.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "e7dccc0a-12ef-490c-af1f-cc8792a16815"
                }
              }
            ]
          },
          {
            "id": "20edb1d6-0e16-4332-afe3-002cde1dda20",
            "name": "Delete Cookies",
            "request": {
              "url": "https://postman-echo.com/cookies/delete?foo1&foo2",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "5abca2bf-915b-47eb-9d41-d42eb8641fd5",
                "name": "Cookies Response",
                "originalRequest": {
                  "url": "",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "46"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:16:00 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('response should be 200 or 302', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie should not be present', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie should not be present', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo2');",
                    "});",
                    "",
                    "// response code could be either a 200 or a redirection based on the settings of ",
                    "// the http client. hence we need to handle both cases",
                    "pm.test('response body should be valid', function () {",
                    "    if (pm.response.code === 200) {",
                    "        pm.response.to.not.have.jsonBody('cookies.foo1');",
                    "        pm.response.to.not.have.jsonBody('cookies.foo2');",
                    "    }",
                    "    else {",
                    "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "4b7dcedb-1fbe-4927-a9b3-85419e63da1b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b1b7cb69-c9cc-4576-b902-62f1446542df",
        "name": "Utilities",
        "item": [
          {
            "id": "d24a8218-4491-4844-8f50-1acc171e1302",
            "name": "Response Status Code",
            "request": {
              "url": "https://postman-echo.com/status/200",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
                "name": "200",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/status/200",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "14"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"e-1056260003\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"status\":200}",
                "cookie": [
                  {
                    "name": "getpostmanlogin",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "yes"
                  },
                  {
                    "name": "postman.sid",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                  },
                  {
                    "name": "_ga",
                    "expires": null,
                    "domain": ".echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "GA1.3.1703443399.1459422978"
                  },
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('status');",
                    "});",
                    "",
                    "// additional sanity tests",
                    "pm.test(\"status in response body must match the one in request\", function () {",
                    "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                    "});"
                  ],
                  "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
                }
              }
            ]
          },
          {
            "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
            "name": "Streamed Response",
            "request": {
              "url": "https://postman-echo.com/stream/5",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has chunked transfer encoding header\", function () {",
                    "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                    "});"
                  ],
                  "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
                }
              }
            ]
          },
          {
            "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
            "name": "Delay Response",
            "request": {
              "url": "https://postman-echo.com/delay/2",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
                "name": "success-response",
                "originalRequest": {
                  "url": "https://echo.getpostman.com/delay/3",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "13"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"delay\":\"3\"}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "var _ = require('lodash');",
                    "",
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('delay');",
                    "});",
                    "",
                    "// additional sanity tests",
                    "pm.test(\"request must have a valid delay\", function () {",
                    "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                    "});",
                    "pm.test(\"response should take more time than the delay specified\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                    "});"
                  ],
                  "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
                }
              }
            ]
          },
          {
            "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
            "name": "Get UTF8 Encoded Response",
            "request": {
              "url": "https://postman-echo.com/encoding/utf8",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has charset in content-type header\", function () {",
                    "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                    "});",
                    "",
                    "pm.test(\"response has chunked transfer encoding header\", function () {",
                    "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                    "});"
                  ],
                  "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
                }
              }
            ]
          },
          {
            "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
            "name": "GZip Compressed Response",
            "request": {
              "url": "https://postman-echo.com/gzip",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('gzipped', true);",
                    "});",
                    "",
                    "pm.test('response headers should indicate valid content encoding', function  () {",
                    "    pm.response.to.have.header('content-encoding', 'gzip')",
                    "        .and.have.header('content-type', 'application/json');",
                    "});",
                    "",
                    "pm.test('requesting http client should accept compressed response', function () {",
                    "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                    "        .and.to.match(/.*gzip.*/);",
                    "});"
                  ],
                  "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
                }
              }
            ]
          },
          {
            "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
            "name": "Deflate Compressed Response",
            "request": {
              "url": "https://postman-echo.com/deflate",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('deflated', true);",
                    "});",
                    "",
                    "pm.test('response headers should indicate valid content encoding', function  () {",
                    "    pm.response.to.have.header('content-encoding', 'deflate')",
                    "        .and.have.header('content-type', 'application/json');",
                    "});",
                    "",
                    "pm.test('requesting http client should accept compressed response', function () {",
                    "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                    "        .and.to.match(/.*deflate.*/);",
                    "});"
                  ],
                  "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
                }
              }
            ]
          },
          {
            "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
            "name": "IP address in JSON format",
            "request": {
              "url": "https://postman-echo.com/ip",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('ip');",
                    "});",
                    "",
                    "pm.test(\"response must return a valid ip address\", function () {",
                    "    pm.expect(pm.response.json().ip).to",
                    "        // a really gnarly regular expression to ensure that ip address is in correct format",
                    "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                    "});"
                  ],
                  "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "00abdc17-7d50-4026-8118-ced6f2b8a0b4",
        "name": "Utilities / Date and Time",
        "description": {
          "content": "A set of `/time/*` mounted requests to perform date-time manipulations, among other operations.\n",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "bcef4c98-835c-4372-aa1e-894a8ef1a0e8",
            "name": "Current UTC time",
            "request": {
              "url": "https://postman-echo.com/time/now",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "html"
                },
                "id": "cf201946-8167-4bac-b9f5-cbca1c847e3b",
                "name": "time as text",
                "originalRequest": {
                  "url": "https://postman-echo.com/time/now",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "49"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "text/html; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:12 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly"
                  }
                ],
                "body": "Wed, 11 Jan 2017 10:27:12 GMT",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response time matches server response 'date' header\", function () {",
                    "    pm.expect(pm.response.text()).to.eql(pm.response.headers.get('date'))",
                    "});"
                  ],
                  "_lastExecutionId": "3bccb2aa-f4c4-4a23-94ae-ad5906069720"
                }
              }
            ]
          },
          {
            "id": "9cf46805-b88d-4b62-98b2-c67c488d370d",
            "name": "Timestamp validity",
            "request": {
              "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "43b89090-8e91-49ae-a285-5cdda604732b",
                "name": "Valid Timestamp",
                "originalRequest": {
                  "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "14"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:33 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly"
                  }
                ],
                "body": "{\"valid\":true}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI"
                  }
                ]
              },
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "ab59bf97-69af-40f1-9e00-8b347c00db38",
                "name": "Invalid Timestamp",
                "originalRequest": {
                  "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                  "method": "GET",
                  "body": {
                    "mode": "raw",
                    "raw": ""
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "15"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:53 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly"
                  }
                ],
                "body": "{\"valid\":false}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query time is valid\", function () {",
                    "    pm.response.to.have.jsonBody('valid', true);",
                    "});"
                  ],
                  "_lastExecutionId": "63f56be6-8a4c-46c6-8d66-cadaca510b60"
                }
              }
            ]
          },
          {
            "id": "5702e768-9584-422e-b86d-a1b67fbaa37f",
            "name": "Format timestamp",
            "request": {
              "url": "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query time is valid\", function () {",
                    "    pm.response.to.have.jsonBody('format', '20');",
                    "});"
                  ],
                  "_lastExecutionId": "e4b86067-43a2-4bed-9ef5-31c59687c628"
                }
              }
            ]
          },
          {
            "id": "aceb1d26-d55d-4bb9-ae69-cf2332fc76ec",
            "name": "Extract timestamp unit",
            "request": {
              "url": "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query unit is valid\", function () {",
                    "    pm.response.to.have.jsonBody('unit', 1);",
                    "});"
                  ],
                  "_lastExecutionId": "618f02bb-d0d7-4368-a253-ff960255accf"
                }
              }
            ]
          },
          {
            "id": "9431cea0-a5b2-4cf9-a235-99baf60e83b2",
            "name": "Time addition",
            "request": {
              "url": "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the added years\", function () {",
                    "    pm.response.to.have.jsonBody('sum', 'Sat Oct 10 2116 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "6cc15a84-325e-4ec5-b249-dbad56eecb5d"
                }
              }
            ]
          },
          {
            "id": "49c3e6aa-9cef-40a7-a203-e331da632f39",
            "name": "Time subtraction",
            "request": {
              "url": "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=50",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the subtracted years\", function () {",
                    "    pm.response.to.have.jsonBody('difference', 'Mon Oct 10 1966 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "cd27c89d-7061-41a3-a254-a383a6b6de05"
                }
              }
            ]
          },
          {
            "id": "b24df3a3-61c1-4d68-b6f3-d3c328ec13ad",
            "name": "Start of time",
            "request": {
              "url": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the beginning of month\", function () {",
                    "    pm.response.to.have.jsonBody('start', 'Sat Oct 01 2016 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "d96ac3bf-a5c8-48dc-b536-1c0288afbed7"
                }
              }
            ]
          },
          {
            "id": "ff1a3deb-bd71-41f5-9e4f-7d19896d4118",
            "name": "Object representation",
            "request": {
              "url": "https://postman-echo.com/time/object?timestamp=2016-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the date components\", function () {",
                    "    pm.expect(pm.response.json()).to.eql({",
                    "        \"years\": 2016,",
                    "        \"months\": 9,",
                    "        \"date\": 10,",
                    "        ",
                    "        \"hours\": 0,",
                    "        \"minutes\": 0,",
                    "        \"seconds\": 0,",
                    "        \"milliseconds\": 0",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "a38e4ca7-5773-4158-8dd9-91d17e899029"
                }
              }
            ]
          },
          {
            "id": "6b4a2c74-0f82-475c-815f-ba2aee9cba7c",
            "name": "Before comparisons",
            "request": {
              "url": "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is before target\", function () {",
                    "    pm.response.to.have.jsonBody('before', true);",
                    "});"
                  ],
                  "_lastExecutionId": "3370e920-9ef2-4bc3-8b4c-cf8443296ef0"
                }
              }
            ]
          },
          {
            "id": "1856107f-5727-4581-af7c-163e61ff8dce",
            "name": "After comparisons",
            "request": {
              "url": "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is not after target\", function () {",
                    "    pm.response.to.have.jsonBody('after', false);",
                    "});"
                  ],
                  "_lastExecutionId": "615788c8-accd-4e64-bba8-036166809b5c"
                }
              }
            ]
          },
          {
            "id": "eb623d24-95a2-48b8-95bf-0d499e115ad1",
            "name": "Between timestamps",
            "request": {
              "url": "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is not between start and end\", function () {",
                    "    pm.response.to.have.jsonBody('between', false);",
                    "});"
                  ],
                  "_lastExecutionId": "e93f673d-0cec-42f7-894d-d416053a8c98"
                }
              }
            ]
          },
          {
            "id": "61f443a0-0b04-410a-815c-417e99e8421f",
            "name": "Leap year check",
            "request": {
              "url": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              },
              "description": {
                "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is within leap year\", function () {",
                    "    pm.response.to.have.jsonBody('leap', true);",
                    "});"
                  ],
                  "_lastExecutionId": "79380a98-b071-4fb3-8400-6be877f4ce90"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "794ceabe-36d6-4132-8619-49dac0676ac0",
        "name": "Utilities / Postman Collection",
        "item": [
          {
            "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
            "name": "Transform collection from format v1 to v2",
            "request": {
              "url": "https://postman-echo.com/transform/collection?from=1&to=2",
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
                "name": "Sample v2 Response",
                "originalRequest": {
                  "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                  "method": "POST",
                  "header": [
                    {
                      "description": {
                        "content": "The mime type of this content",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "X-HTTP-Method-Override, Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has almost valid items\", function () {",
                    "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                    "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                    "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                    "});"
                  ],
                  "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
                }
              }
            ]
          },
          {
            "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
            "name": "Transform collection from format v2 to v1",
            "request": {
              "url": "https://postman-echo.com/transform/collection?from=2&to=1",
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
                "name": "Sample v1 Response",
                "originalRequest": {
                  "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                  "method": "POST",
                  "header": [
                    {
                      "description": {
                        "content": "The mime type of this content",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "X-HTTP-Method-Override, Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has almost valid items\", function () {",
                    "    pm.response.to.have.jsonBody('folders', [])",
                    "        .and.to.have.jsonBody('order')",
                    "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                    "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                    "});"
                  ],
                  "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dfe61e11-edec-4dbb-aa5b-0bd4e57f6f79",
        "name": "Auth: Digest",
        "description": {
          "content": "Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.\nOne has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.\n\n> Username: `postman`\n>\n> Password: `password`\n\nUnlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.\n\nTo know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "274e2aeb-7eaf-4a16-b001-20402e8f8bb8",
            "name": "DigestAuth Request",
            "request": {
              "url": "https://postman-echo.com/digest-auth",
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "code",
                    "value": "xWnkliVQJURqB2x1",
                    "type": "text"
                  },
                  {
                    "key": "grant_type",
                    "value": "authorization_code",
                    "type": "text"
                  },
                  {
                    "key": "redirect_uri",
                    "value": "https://www.getpostman.com/oauth2/callback",
                    "type": "text"
                  },
                  {
                    "key": "client_id",
                    "value": "abc123",
                    "type": "text"
                  },
                  {
                    "key": "client_secret",
                    "value": "ssh-secret",
                    "type": "text"
                  }
                ]
              },
              "description": {
                "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
                "type": "text/plain"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "tests[\"response code is 401\"] = responseCode.code === 401;",
                    "tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
                    "",
                    "var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
                    "    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
                    "    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
                    "    realm = authenticateHeader.slice(realmStart,realmEnd),",
                    "    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
                    "    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
                    "    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
                    "    ",
                    "postman.setGlobalVariable('echo_digest_realm', realm);",
                    "postman.setGlobalVariable('echo_digest_nonce', nonce);"
                  ],
                  "_lastExecutionId": "130e226c-0d63-4cee-ad6d-22de4dcfbc1f"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ]
  },
  "environment": {
    "id": "5488506d-6946-44a4-98bb-62694e987561",
    "values": []
  },
  "globals": {
    "id": "80d7585d-3bd7-43c1-baf1-1c9d13600893",
    "values": [
      {
        "type": "any",
        "value": "Users",
        "key": "echo_digest_realm"
      },
      {
        "type": "any",
        "value": "oa7HhoCF02h15jKyv2NrVsjNcCM1OjJY",
        "key": "echo_digest_nonce"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 37,
        "pending": 0,
        "failed": 2
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 88,
        "pending": 0,
        "failed": 12
      },
      "testScripts": {
        "total": 37,
        "pending": 0,
        "failed": 2
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 173.70270270270274,
      "started": 1540933448291,
      "completed": 1540933455804
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3253abee-13af-4307-8d07-b0470ae4dfb1"
        },
        "item": {
          "id": "c85cfd9d-b8c3-4e06-b573-be32ddd4c340",
          "name": "GET Request",
          "request": {
            "url": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with request queries\", function () {",
                  "    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
                  "        .and.have.jsonBody('args.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "801055ab-f60c-48b6-ae03-e3e7749691e3"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "20608aa2-c1a2-4299-96fb-5a1b219eb17c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:10 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"10f-ABXJNEo9TwasqOPvIirM9Dz3zHk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Ajyu24hfA7WE0vb_BID545FFiDaJL3869.MHF6BwHt0%2B6ytqiSBEr0n52ypoxl0EUmG3L1IwgDTmo; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "197"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              103,
              101,
              116,
              63,
              102,
              111,
              111,
              49,
              61,
              98,
              97,
              114,
              49,
              38,
              102,
              111,
              111,
              50,
              61,
              98,
              97,
              114,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 489,
          "responseSize": 271
        },
        "id": "c85cfd9d-b8c3-4e06-b573-be32ddd4c340",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with request queries"
          }
        ]
      },
      {
        "cursor": {
          "ref": "9ed9c576-33f0-4a88-9f4c-7043913f4e81",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0
        },
        "item": {
          "id": "5586f942-4ad7-487a-9ead-227bf1f57089",
          "name": "POST Raw Text",
          "request": {
            "url": "https://postman-echo.com/post",
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            },
            "description": {
              "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with request body\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "29bb5ff9-a984-4cdb-a098-4c57a0f9323e"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/post",
          "method": "POST",
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Ajyu24hfA7WE0vb_BID545FFiDaJL3869.MHF6BwHt0%2B6ytqiSBEr0n52ypoxl0EUmG3L1IwgDTmo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 58
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          },
          "description": {
            "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "5fcff8db-7b56-4fa6-9870-efcd6ad73258",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1e0-j7AieFESoVRrbxKH/4nZznwXpFU\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "354"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              106,
              121,
              117,
              50,
              52,
              104,
              102,
              65,
              55,
              87,
              69,
              48,
              118,
              98,
              95,
              66,
              73,
              68,
              53,
              52,
              53,
              70,
              70,
              105,
              68,
              97,
              74,
              76,
              51,
              56,
              54,
              57,
              46,
              77,
              72,
              70,
              54,
              66,
              119,
              72,
              116,
              48,
              37,
              50,
              66,
              54,
              121,
              116,
              113,
              105,
              83,
              66,
              69,
              114,
              48,
              110,
              53,
              50,
              121,
              112,
              111,
              120,
              108,
              48,
              69,
              85,
              109,
              71,
              51,
              76,
              49,
              73,
              119,
              103,
              68,
              84,
              109,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 215,
          "responseSize": 480
        },
        "id": "5586f942-4ad7-487a-9ead-227bf1f57089",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with request body"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef25e8c5-51af-4176-be29-4aa5466d5ff5",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0
        },
        "item": {
          "id": "6cb86b28-b49a-4996-819b-6e8509e87e49",
          "name": "POST Form Data",
          "request": {
            "url": "https://postman-echo.com/post",
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "foo1",
                  "value": "bar1"
                },
                {
                  "key": "foo2",
                  "value": "bar2"
                }
              ]
            },
            "description": {
              "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
                  "        .and.have.jsonBody('form.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "7016cb36-a5a9-4015-b8a4-d199e7cfb964"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/post",
          "method": "POST",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Ajyu24hfA7WE0vb_BID545FFiDaJL3869.MHF6BwHt0%2B6ytqiSBEr0n52ypoxl0EUmG3L1IwgDTmo"
            },
            {
              "key": "content-type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 19
            }
          ],
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "foo1",
                "value": "bar1"
              },
              {
                "key": "foo2",
                "value": "bar2"
              }
            ]
          },
          "description": {
            "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "d68c3e0d-8fca-4657-a8a8-46d2edb588ac",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1f1-4G6+glV7DjzmNTrz2eiwjW3I9xk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "342"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              49,
              57,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              119,
              119,
              119,
              45,
              102,
              111,
              114,
              109,
              45,
              117,
              114,
              108,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              106,
              121,
              117,
              50,
              52,
              104,
              102,
              65,
              55,
              87,
              69,
              48,
              118,
              98,
              95,
              66,
              73,
              68,
              53,
              52,
              53,
              70,
              70,
              105,
              68,
              97,
              74,
              76,
              51,
              56,
              54,
              57,
              46,
              77,
              72,
              70,
              54,
              66,
              119,
              72,
              116,
              48,
              37,
              50,
              66,
              54,
              121,
              116,
              113,
              105,
              83,
              66,
              69,
              114,
              48,
              110,
              53,
              50,
              121,
              112,
              111,
              120,
              108,
              48,
              69,
              85,
              109,
              71,
              51,
              76,
              49,
              73,
              119,
              103,
              68,
              84,
              109,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 497
        },
        "id": "6cb86b28-b49a-4996-819b-6e8509e87e49",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with form data"
          }
        ]
      },
      {
        "cursor": {
          "ref": "269bb3b7-347a-4fbf-85c8-16a1c99f2e39",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0
        },
        "item": {
          "id": "e4dc4532-dbb0-4ecc-832b-46baad0049ba",
          "name": "PUT Request",
          "request": {
            "url": "https://postman-echo.com/put",
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            },
            "description": {
              "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "214a0a33-0da2-4581-ae67-0ec9cf182798"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/put",
          "method": "PUT",
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Ajyu24hfA7WE0vb_BID545FFiDaJL3869.MHF6BwHt0%2B6ytqiSBEr0n52ypoxl0EUmG3L1IwgDTmo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 58
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          },
          "description": {
            "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "5955acf0-82f3-4646-9843-3a57baccf957",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1df-2u5WmD0X3GTsxoXydOg0Gon4E9A\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "355"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              106,
              121,
              117,
              50,
              52,
              104,
              102,
              65,
              55,
              87,
              69,
              48,
              118,
              98,
              95,
              66,
              73,
              68,
              53,
              52,
              53,
              70,
              70,
              105,
              68,
              97,
              74,
              76,
              51,
              56,
              54,
              57,
              46,
              77,
              72,
              70,
              54,
              66,
              119,
              72,
              116,
              48,
              37,
              50,
              66,
              54,
              121,
              116,
              113,
              105,
              83,
              66,
              69,
              114,
              48,
              110,
              53,
              50,
              121,
              112,
              111,
              120,
              108,
              48,
              69,
              85,
              109,
              71,
              51,
              76,
              49,
              73,
              119,
              103,
              68,
              84,
              109,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 479
        },
        "id": "e4dc4532-dbb0-4ecc-832b-46baad0049ba",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with form data"
          }
        ]
      },
      {
        "cursor": {
          "ref": "742a6484-850c-4878-b18e-0dfc67cf0497",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0
        },
        "item": {
          "id": "5b96576a-5dc2-4616-a753-d7b40a8597cd",
          "name": "PATCH Request",
          "request": {
            "url": "https://postman-echo.com/patch",
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            },
            "description": {
              "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "cec2b021-058b-4bb9-9976-7c199fafddd0"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/patch",
          "method": "PATCH",
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Ajyu24hfA7WE0vb_BID545FFiDaJL3869.MHF6BwHt0%2B6ytqiSBEr0n52ypoxl0EUmG3L1IwgDTmo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 58
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          },
          "description": {
            "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "978e2012-302e-4beb-94fe-211578891c31",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1e1-iomJEFjTRH6gRnK6M01lWWg8clY\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AVj_VBJnj8ElwDPJiPJAU2djdCe_UbqcL.fEXx4lq34XPrwy%2B7htVCx%2BwL8x4Y31yWczFGv6yme0g; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "360"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              106,
              121,
              117,
              50,
              52,
              104,
              102,
              65,
              55,
              87,
              69,
              48,
              118,
              98,
              95,
              66,
              73,
              68,
              53,
              52,
              53,
              70,
              70,
              105,
              68,
              97,
              74,
              76,
              51,
              56,
              54,
              57,
              46,
              77,
              72,
              70,
              54,
              66,
              119,
              72,
              116,
              48,
              37,
              50,
              66,
              54,
              121,
              116,
              113,
              105,
              83,
              66,
              69,
              114,
              48,
              110,
              53,
              50,
              121,
              112,
              111,
              120,
              108,
              48,
              69,
              85,
              109,
              71,
              51,
              76,
              49,
              73,
              119,
              103,
              68,
              84,
              109,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              97,
              116,
              99,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 481
        },
        "id": "5b96576a-5dc2-4616-a753-d7b40a8597cd",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with form data"
          }
        ]
      },
      {
        "cursor": {
          "ref": "58c9fb2c-ad65-40d9-98cc-052eb1041515",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0
        },
        "item": {
          "id": "7be6f0bd-ab22-41fc-9825-b2b7b0ba2d80",
          "name": "DELETE Request",
          "request": {
            "url": "https://postman-echo.com/delete",
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            },
            "description": {
              "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "621a830e-1b76-4bd5-8e4a-6cca6e157f2a"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/delete",
          "method": "DELETE",
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AVj_VBJnj8ElwDPJiPJAU2djdCe_UbqcL.fEXx4lq34XPrwy%2B7htVCx%2BwL8x4Y31yWczFGv6yme0g"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 58
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          },
          "description": {
            "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "93d6ee54-56c6-42cc-a58d-13430fdf1d4f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1e4-vqDzoo8uYGACw1fmCst1WSSWRvk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "357"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              86,
              106,
              95,
              86,
              66,
              74,
              110,
              106,
              56,
              69,
              108,
              119,
              68,
              80,
              74,
              105,
              80,
              74,
              65,
              85,
              50,
              100,
              106,
              100,
              67,
              101,
              95,
              85,
              98,
              113,
              99,
              76,
              46,
              102,
              69,
              88,
              120,
              52,
              108,
              113,
              51,
              52,
              88,
              80,
              114,
              119,
              121,
              37,
              50,
              66,
              55,
              104,
              116,
              86,
              67,
              120,
              37,
              50,
              66,
              119,
              76,
              56,
              120,
              52,
              89,
              51,
              49,
              121,
              87,
              99,
              122,
              70,
              71,
              118,
              54,
              121,
              109,
              101,
              48,
              103,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 118,
          "responseSize": 484
        },
        "id": "7be6f0bd-ab22-41fc-9825-b2b7b0ba2d80",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response body has json with form data"
          }
        ]
      },
      {
        "cursor": {
          "ref": "bb1c1471-eebe-44c4-a422-7e5b14f09748",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0
        },
        "item": {
          "id": "02d0d143-d95d-426c-878a-95d1a4ca3295",
          "name": "Request Headers",
          "request": {
            "url": "https://postman-echo.com/headers",
            "method": "GET",
            "header": [
              {
                "key": "my-sample-header",
                "value": "Lorem ipsum dolor sit amet"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "6422f749-0496-4e91-9986-df33d898e5a7",
              "name": "my-sample-header",
              "originalRequest": {
                "url": "https://echo.getpostman.com/headers",
                "method": "GET",
                "header": [
                  {
                    "key": "my-sample-header",
                    "value": "Lorem ipsum dolor sit amet"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "342"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:14:00 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate, sdch\",\"accept-language\":\"en-US,en;q=0.8\",\"cache-control\":\"no-cache\",\"my-sample-header\":\"Lorem ipsum dolor sit amet\",\"postman-token\":\"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"}}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// we check to ensire that the headers we sent as request is returned as part of",
                  "// the response body. if you change the request headers, make sure to add them",
                  "// to the tests here",
                  "pm.test(\"sample request header should be returned in response body\", function () {",
                  "    pm.response.to.have.jsonBody('headers.my-sample-header', 'Lorem ipsum dolor sit amet');",
                  "});"
                ],
                "_lastExecutionId": "224b9283-4504-4959-8845-c55ecbb130c1"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/headers",
          "method": "GET",
          "header": [
            {
              "key": "my-sample-header",
              "value": "Lorem ipsum dolor sit amet"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AVj_VBJnj8ElwDPJiPJAU2djdCe_UbqcL.fEXx4lq34XPrwy%2B7htVCx%2BwL8x4Y31yWczFGv6yme0g"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "07e86818-93b5-4ec2-a4c9-a274e8b2a9db",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"14b-nDmAAz7PhaRLdJfOItx2Owr4ucw\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A6PPXApLA1_VM2bbB616_HOwlKs5836aX.zNTPqZyZ8lz2cos%2BFPVhuKMg3jFcSwjl1yR5wPT9%2BYU; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "279"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              86,
              106,
              95,
              86,
              66,
              74,
              110,
              106,
              56,
              69,
              108,
              119,
              68,
              80,
              74,
              105,
              80,
              74,
              65,
              85,
              50,
              100,
              106,
              100,
              67,
              101,
              95,
              85,
              98,
              113,
              99,
              76,
              46,
              102,
              69,
              88,
              120,
              52,
              108,
              113,
              51,
              52,
              88,
              80,
              114,
              119,
              121,
              37,
              50,
              66,
              55,
              104,
              116,
              86,
              67,
              120,
              37,
              50,
              66,
              119,
              76,
              56,
              120,
              52,
              89,
              51,
              49,
              121,
              87,
              99,
              122,
              70,
              71,
              118,
              54,
              121,
              109,
              101,
              48,
              103,
              34,
              44,
              34,
              109,
              121,
              45,
              115,
              97,
              109,
              112,
              108,
              101,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              58,
              34,
              76,
              111,
              114,
              101,
              109,
              32,
              105,
              112,
              115,
              117,
              109,
              32,
              100,
              111,
              108,
              111,
              114,
              32,
              115,
              105,
              116,
              32,
              97,
              109,
              101,
              116,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 75,
          "responseSize": 331
        },
        "id": "02d0d143-d95d-426c-878a-95d1a4ca3295",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "sample request header should be returned in response body"
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1002331-f07f-454f-9faa-59d4c86453b3",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0
        },
        "item": {
          "id": "93f8cb2f-4884-468b-9092-534a314ca2cd",
          "name": "Response Headers",
          "request": {
            "url": "https://postman-echo.com/response-headers?foo1=bar1&foo2=bar2",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "html"
              },
              "id": "a5756913-8d1e-46d8-8b06-b31b8c369abd",
              "name": "Response headers",
              "originalRequest": {
                "url": "https://echo.getpostman.com/response-headers?Content-Type=text/html&test=response_headers",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "71"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "text/html; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:14:18 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "test",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "test",
                  "value": "response_headers"
                }
              ],
              "body": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has the headers sent as part of request query\", function () {",
                  "    pm.response.to.have.header('foo1', 'bar1')",
                  "        .and.have.header('foo2', 'bar2');",
                  "});",
                  "",
                  "pm.test(\"sample request param should be returned in response body\", function () {",
                  "    pm.response.to.have.jsonBody('foo1', 'bar1')",
                  "        .and.have.jsonBody('foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "c429cdb8-77cc-48c2-b359-3c9815ac2e92"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/response-headers?foo1=bar1&foo2=bar2",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A6PPXApLA1_VM2bbB616_HOwlKs5836aX.zNTPqZyZ8lz2cos%2BFPVhuKMg3jFcSwjl1yR5wPT9%2BYU"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "f325a050-26b2-4890-b334-46b4dce3a99f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:11 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-PgOLWVqd2mMvcpNzTF0Cfy4hftg\""
            },
            {
              "key": "foo1",
              "value": "bar1"
            },
            {
              "key": "foo2",
              "value": "bar2"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 137,
          "responseSize": 29
        },
        "id": "93f8cb2f-4884-468b-9092-534a314ca2cd",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has the headers sent as part of request query"
          },
          {
            "assertion": "sample request param should be returned in response body"
          }
        ]
      },
      {
        "cursor": {
          "ref": "71cfd0e4-d394-472a-98c4-2b05f8b82871",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0
        },
        "item": {
          "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
          "name": "Basic Auth",
          "request": {
            "url": "https://postman-echo.com/basic-auth",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "basic",
              "basic": {}
            },
            "description": {
              "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
              "name": "200",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying 'authenticated'\", function () {",
                  "    pm.response.to.have.jsonBody('authenticated', true);",
                  "});"
                ],
                "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/basic-auth",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A6PPXApLA1_VM2bbB616_HOwlKs5836aX.zNTPqZyZ8lz2cos%2BFPVhuKMg3jFcSwjl1yR5wPT9%2BYU"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "basic",
            "basic": {}
          },
          "description": {
            "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "cdf8f2b7-e001-4ea2-ab06-5e5668abf7ab",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "WWW-Authenticate",
              "value": "Basic realm=\"Users\""
            },
            {
              "key": "Content-Length",
              "value": "12"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 90,
          "responseSize": 12
        },
        "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
        "assertions": [
          {
            "assertion": "response is ok",
            "error": {
              "name": "AssertionError",
              "index": 0,
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response body has json saying 'authenticated'",
            "error": {
              "name": "AssertionError",
              "index": 1,
              "message": "expected undefined in response to contain property 'authenticated'",
              "stack": "AssertionFailure: expected undefined in response to contain property 'authenticated'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "487a700b-5b5d-48b4-8576-6383fd8019cf",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0
        },
        "item": {
          "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
          "name": "DigestAuth Success",
          "request": {
            "url": "https://postman-echo.com/digest-auth",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "digest",
              "digest": {}
            },
            "description": {
              "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
              "name": "200",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                ],
                "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/digest-auth",
          "method": "GET",
          "header": [
            {
              "key": "Authorization",
              "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A6PPXApLA1_VM2bbB616_HOwlKs5836aX.zNTPqZyZ8lz2cos%2BFPVhuKMg3jFcSwjl1yR5wPT9%2BYU"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "digest",
            "digest": {}
          },
          "description": {
            "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "b5d21014-45b6-4e10-b5ae-8cc139238459",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"16-sJz8uwjdDv0wvm7//BYdNw8vMbU\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Az5dLU2vn9MCHNf2P-LX7EZZb0OkBOHyH.oC%2FUw5CGD6tNVtyVOWsha3xh4V%2Fn8yUVVYJvuQ3Vvg4; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 344,
          "responseSize": 22
        },
        "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
        "assertions": [
          {
            "assertion": "response code is 200"
          },
          {
            "assertion": "body contains authenticated"
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2136899-c2f3-421b-baff-e38d63e47a55",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0
        },
        "item": {
          "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
          "name": "Hawk Auth",
          "request": {
            "url": "https://postman-echo.com/auth/hawk",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "access_token",
                  "value": "xyz1",
                  "type": "text"
                },
                {
                  "key": "id",
                  "value": "U1",
                  "type": "text"
                },
                {
                  "key": "server_secret",
                  "value": "zeppelin",
                  "type": "text"
                },
                {
                  "key": "admin",
                  "value": "true",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "hawk",
              "hawk": {}
            },
            "description": {
              "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
              "name": "Success",
              "originalRequest": {
                "url": "https://echo.getpostman.com/auth/hawk",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Server-Authorization",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server-Authorization",
                  "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/auth/hawk",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Az5dLU2vn9MCHNf2P-LX7EZZb0OkBOHyH.oC%2FUw5CGD6tNVtyVOWsha3xh4V%2Fn8yUVVYJvuQ3Vvg4"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "access_token",
                "value": "xyz1",
                "type": "text"
              },
              {
                "key": "id",
                "value": "U1",
                "type": "text"
              },
              {
                "key": "server_secret",
                "value": "zeppelin",
                "type": "text"
              },
              {
                "key": "admin",
                "value": "true",
                "type": "text"
              }
            ]
          },
          "auth": {
            "type": "hawk",
            "hawk": {}
          },
          "description": {
            "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "43a4e125-3a67-4d79-835f-602b32d43024",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"29-O6gP33ALmcYdbLhsI8ncjapAJ44\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "41"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 87,
          "responseSize": 41
        },
        "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
        "assertions": [
          {
            "assertion": "response is ok",
            "error": {
              "name": "AssertionError",
              "index": 0,
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response body has json saying passed 'status'",
            "error": {
              "name": "AssertionError",
              "index": 1,
              "message": "expected { Object (statusCode, error) } in response to contain property 'status'",
              "stack": "AssertionFailure: expected { Object (statusCode, error) } in response to contain property 'status'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0dbd2e8c-58b8-486f-87cb-d624cae445f7",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0
        },
        "item": {
          "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
          "name": "OAuth1.0 (verify signature)",
          "request": {
            "url": "https://postman-echo.com/oauth1",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "code",
                  "value": "xWnkliVQJURqB2x1",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "authorization_code",
                  "type": "text"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://www.getpostman.com/oauth2/callback",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "abc123",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "ssh-secret",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "oauth1",
              "oauth1": {}
            },
            "description": {
              "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
              "name": "401",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "536"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
              "name": "200",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "95"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/oauth1",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Az5dLU2vn9MCHNf2P-LX7EZZb0OkBOHyH.oC%2FUw5CGD6tNVtyVOWsha3xh4V%2Fn8yUVVYJvuQ3Vvg4"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "code",
                "value": "xWnkliVQJURqB2x1",
                "type": "text"
              },
              {
                "key": "grant_type",
                "value": "authorization_code",
                "type": "text"
              },
              {
                "key": "redirect_uri",
                "value": "https://www.getpostman.com/oauth2/callback",
                "type": "text"
              },
              {
                "key": "client_id",
                "value": "abc123",
                "type": "text"
              },
              {
                "key": "client_secret",
                "value": "ssh-secret",
                "type": "text"
              }
            ]
          },
          "auth": {
            "type": "oauth1",
            "oauth1": {}
          },
          "description": {
            "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "b8145913-bffb-4224-8208-852f5a7de7a6",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"45-yVbKFhOtTbqe6VaHuzbzkY9EkZo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AtLwpXUQ7NFpugr_8QLUDp8QSUfFYmeU8.vn2XcUornwyNxOO41lUqY81UBp%2B%2FDQNOVDRirEKNWkQ; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "69"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              102,
              97,
              105,
              108,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              111,
              114,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              97,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 69
        },
        "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
        "assertions": [
          {
            "assertion": "response is ok",
            "error": {
              "name": "AssertionError",
              "index": 0,
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response body has json saying passed 'status'",
            "error": {
              "name": "AssertionError",
              "index": 1,
              "message": "expected response body json at \"status\" to contain 'pass' but got 'fail'",
              "stack": "AssertionFailure: expected response body json at \"status\" to contain 'pass' but got 'fail'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cfb3ec27-761c-438e-b733-fadda5defa64",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0
        },
        "item": {
          "id": "4c923e62-57c8-4bb7-9110-35be96d8fec8",
          "name": "Set Cookies",
          "request": {
            "url": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "dc82d006-142f-4ca1-acfa-2f8ad5dd3e62",
              "name": "Cookies",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "51"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:15:28 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('response should be 200 or 302', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                  "});",
                  "",
                  "// response code could be either a 200 or a redirection based on the settings of ",
                  "// the http client. hence we need to handle both cases",
                  "pm.test('response body should be valid', function () {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.jsonBody('cookies.foo1', 'bar1')",
                  "            .and.have.jsonBody('cookies.foo2', 'bar2');",
                  "    }",
                  "    else {",
                  "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "85062525-fdf8-4131-a2e5-81aff02be93f"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AsI777nDjeyc3-3BQFJpAIrr6r0Yjad1Y.atpivK0temXYnon99%2FDIJy8gOqUviHyOfIDoRrpokZU; foo1=bar1; foo2=bar2"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "referer",
              "value": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "d83b3919-e4e0-40b4-a0c1-b0550cd78e7a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"29-JRHqGq7F5tGozH71XMqVk/pLueo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A0Ehyyl4YpVjaKFMsEYjyr58aX8lgVmpT.kBjCvJ9YKO9SCXS1%2BLbUvKgHEdG7B%2B7Wcb8iYX6TWak; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 158,
          "responseSize": 41
        },
        "id": "4c923e62-57c8-4bb7-9110-35be96d8fec8",
        "assertions": [
          {
            "assertion": "response should be 200 or 302"
          },
          {
            "assertion": "the \"foo1\" cookie has correct value"
          },
          {
            "assertion": "the \"foo2\" cookie has correct value"
          },
          {
            "assertion": "response body should be valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "570d4c9a-dc20-4548-aa58-e41a831c23bf",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0
        },
        "item": {
          "id": "4489ffa9-23cd-47ae-962a-d68489799d61",
          "name": "Get Cookies",
          "request": {
            "url": "https://postman-echo.com/cookies",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "29f4eb7e-5a20-4e30-b6c3-18828f6926e1",
              "name": "Cookies",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "46"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:16:29 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                  "});",
                  "",
                  "pm.test('response body should be valid', function () {",
                  "    pm.response.to.have.jsonBody('cookies.foo1', 'bar1');",
                  "    pm.response.to.have.jsonBody('cookies.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "e7dccc0a-12ef-490c-af1f-cc8792a16815"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/cookies",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A0Ehyyl4YpVjaKFMsEYjyr58aX8lgVmpT.kBjCvJ9YKO9SCXS1%2BLbUvKgHEdG7B%2B7Wcb8iYX6TWak; foo1=bar1; foo2=bar2"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "007b0c9d-9a9d-4799-94f3-bfac7b28b4ab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:12 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"29-JRHqGq7F5tGozH71XMqVk/pLueo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 41
        },
        "id": "4489ffa9-23cd-47ae-962a-d68489799d61",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "the \"foo1\" cookie has correct value"
          },
          {
            "assertion": "the \"foo2\" cookie has correct value"
          },
          {
            "assertion": "response body should be valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "449ab1ae-0652-452b-b7c1-fd074fbd5c9f",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0
        },
        "item": {
          "id": "20edb1d6-0e16-4332-afe3-002cde1dda20",
          "name": "Delete Cookies",
          "request": {
            "url": "https://postman-echo.com/cookies/delete?foo1&foo2",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "5abca2bf-915b-47eb-9d41-d42eb8641fd5",
              "name": "Cookies Response",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "46"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:16:00 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('response should be 200 or 302', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie should not be present', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie should not be present', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo2');",
                  "});",
                  "",
                  "// response code could be either a 200 or a redirection based on the settings of ",
                  "// the http client. hence we need to handle both cases",
                  "pm.test('response body should be valid', function () {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.not.have.jsonBody('cookies.foo1');",
                  "        pm.response.to.not.have.jsonBody('cookies.foo2');",
                  "    }",
                  "    else {",
                  "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "4b7dcedb-1fbe-4927-a9b3-85419e63da1b"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/cookies/delete?foo1&foo2",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AOaDqrsmvZ_a7hDpsR5cHQL_SvZikctVD.XoiwzxlugNEQfypLV6u839H4h%2BRRN9YssQN1G0NPp4U"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "referer",
              "value": "https://postman-echo.com/cookies/delete?foo1&foo2"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "bc3fad4d-d8c2-48a9-9854-31bd5d4d595e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:13 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"e-HwHgMXOuquwNiBd0Mx9LHc/Rmfk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A1Z9irpTNzybQVx9q7tlJShd9HebqR7-y.llW4FoJFJFgB%2B3hY2VWonaJyD1W1U%2By%2BxByMXYEvJbE; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 155,
          "responseSize": 14
        },
        "id": "20edb1d6-0e16-4332-afe3-002cde1dda20",
        "assertions": [
          {
            "assertion": "response should be 200 or 302"
          },
          {
            "assertion": "the \"foo1\" cookie should not be present"
          },
          {
            "assertion": "the \"foo2\" cookie should not be present"
          },
          {
            "assertion": "response body should be valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "eac2fd4f-b86d-40af-8787-7c3e6a8476e0",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0
        },
        "item": {
          "id": "d24a8218-4491-4844-8f50-1acc171e1302",
          "name": "Response Status Code",
          "request": {
            "url": "https://postman-echo.com/status/200",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
              "name": "200",
              "originalRequest": {
                "url": "https://echo.getpostman.com/status/200",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "14"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"e-1056260003\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"status\":200}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                },
                {
                  "name": "_ga",
                  "expires": null,
                  "domain": ".echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "GA1.3.1703443399.1459422978"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('status');",
                  "});",
                  "",
                  "// additional sanity tests",
                  "pm.test(\"status in response body must match the one in request\", function () {",
                  "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                  "});"
                ],
                "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/status/200",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A1Z9irpTNzybQVx9q7tlJShd9HebqR7-y.llW4FoJFJFgB%2B3hY2VWonaJyD1W1U%2By%2BxByMXYEvJbE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "6273b36d-0faf-4d07-aa8c-602e88b469a0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:13 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"e-QlsUp1vTYvBgYHrHCBYe2n/q268\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              50,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 124,
          "responseSize": 14
        },
        "id": "d24a8218-4491-4844-8f50-1acc171e1302",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has valid json body"
          },
          {
            "assertion": "status in response body must match the one in request"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6c68f20-9b2e-490b-a702-b27cb7edabd2",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0
        },
        "item": {
          "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
          "name": "Streamed Response",
          "request": {
            "url": "https://postman-echo.com/stream/5",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/stream/5",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A1Z9irpTNzybQVx9q7tlJShd9HebqR7-y.llW4FoJFJFgB%2B3hY2VWonaJyD1W1U%2By%2BxByMXYEvJbE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "3744b4ea-06f0-4278-bdb8-3973f4f5f0d4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:13 GMT"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Content-Length",
              "value": "2055"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              49,
              90,
              57,
              105,
              114,
              112,
              84,
              78,
              122,
              121,
              98,
              81,
              86,
              120,
              57,
              113,
              55,
              116,
              108,
              74,
              83,
              104,
              100,
              57,
              72,
              101,
              98,
              113,
              82,
              55,
              45,
              121,
              46,
              108,
              108,
              87,
              52,
              70,
              111,
              74,
              70,
              74,
              70,
              103,
              66,
              37,
              50,
              66,
              51,
              104,
              89,
              50,
              86,
              87,
              111,
              110,
              97,
              74,
              121,
              68,
              49,
              87,
              49,
              85,
              37,
              50,
              66,
              121,
              37,
              50,
              66,
              120,
              66,
              121,
              77,
              88,
              89,
              69,
              118,
              74,
              98,
              69,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              49,
              90,
              57,
              105,
              114,
              112,
              84,
              78,
              122,
              121,
              98,
              81,
              86,
              120,
              57,
              113,
              55,
              116,
              108,
              74,
              83,
              104,
              100,
              57,
              72,
              101,
              98,
              113,
              82,
              55,
              45,
              121,
              46,
              108,
              108,
              87,
              52,
              70,
              111,
              74,
              70,
              74,
              70,
              103,
              66,
              37,
              50,
              66,
              51,
              104,
              89,
              50,
              86,
              87,
              111,
              110,
              97,
              74,
              121,
              68,
              49,
              87,
              49,
              85,
              37,
              50,
              66,
              121,
              37,
              50,
              66,
              120,
              66,
              121,
              77,
              88,
              89,
              69,
              118,
              74,
              98,
              69,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              49,
              90,
              57,
              105,
              114,
              112,
              84,
              78,
              122,
              121,
              98,
              81,
              86,
              120,
              57,
              113,
              55,
              116,
              108,
              74,
              83,
              104,
              100,
              57,
              72,
              101,
              98,
              113,
              82,
              55,
              45,
              121,
              46,
              108,
              108,
              87,
              52,
              70,
              111,
              74,
              70,
              74,
              70,
              103,
              66,
              37,
              50,
              66,
              51,
              104,
              89,
              50,
              86,
              87,
              111,
              110,
              97,
              74,
              121,
              68,
              49,
              87,
              49,
              85,
              37,
              50,
              66,
              121,
              37,
              50,
              66,
              120,
              66,
              121,
              77,
              88,
              89,
              69,
              118,
              74,
              98,
              69,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              49,
              90,
              57,
              105,
              114,
              112,
              84,
              78,
              122,
              121,
              98,
              81,
              86,
              120,
              57,
              113,
              55,
              116,
              108,
              74,
              83,
              104,
              100,
              57,
              72,
              101,
              98,
              113,
              82,
              55,
              45,
              121,
              46,
              108,
              108,
              87,
              52,
              70,
              111,
              74,
              70,
              74,
              70,
              103,
              66,
              37,
              50,
              66,
              51,
              104,
              89,
              50,
              86,
              87,
              111,
              110,
              97,
              74,
              121,
              68,
              49,
              87,
              49,
              85,
              37,
              50,
              66,
              121,
              37,
              50,
              66,
              120,
              66,
              121,
              77,
              88,
              89,
              69,
              118,
              74,
              98,
              69,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              49,
              90,
              57,
              105,
              114,
              112,
              84,
              78,
              122,
              121,
              98,
              81,
              86,
              120,
              57,
              113,
              55,
              116,
              108,
              74,
              83,
              104,
              100,
              57,
              72,
              101,
              98,
              113,
              82,
              55,
              45,
              121,
              46,
              108,
              108,
              87,
              52,
              70,
              111,
              74,
              70,
              74,
              70,
              103,
              66,
              37,
              50,
              66,
              51,
              104,
              89,
              50,
              86,
              87,
              111,
              110,
              97,
              74,
              121,
              68,
              49,
              87,
              49,
              85,
              37,
              50,
              66,
              121,
              37,
              50,
              66,
              120,
              66,
              121,
              77,
              88,
              89,
              69,
              118,
              74,
              98,
              69,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 81,
          "responseSize": 2055
        },
        "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
        "assertions": [
          {
            "assertion": "response is ok"
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Invalid Chai property: _postman_propertyIsList",
              "checksum": "cededb2b7e09ddc1966754c80c85e582",
              "id": "e64536ed-1d7d-478b-bdcb-a406c81b0f56",
              "timestamp": 1540933451383,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6a92f010-cbf6-45f9-8516-89b7f0c46738",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0
        },
        "item": {
          "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
          "name": "Delay Response",
          "request": {
            "url": "https://postman-echo.com/delay/2",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
              "name": "success-response",
              "originalRequest": {
                "url": "https://echo.getpostman.com/delay/3",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "13"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"delay\":\"3\"}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');",
                  "",
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('delay');",
                  "});",
                  "",
                  "// additional sanity tests",
                  "pm.test(\"request must have a valid delay\", function () {",
                  "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                  "});",
                  "pm.test(\"response should take more time than the delay specified\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                  "});"
                ],
                "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/delay/2",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A1Z9irpTNzybQVx9q7tlJShd9HebqR7-y.llW4FoJFJFgB%2B3hY2VWonaJyD1W1U%2By%2BxByMXYEvJbE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "56676c4c-ecfe-4d7d-a2da-6cf697e14da7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:15 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"d-vb8pS8uHJYunqF73qADGxcv0Je8\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              108,
              97,
              121,
              34,
              58,
              34,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2119,
          "responseSize": 13
        },
        "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has valid json body"
          },
          {
            "assertion": "request must have a valid delay"
          },
          {
            "assertion": "response should take more time than the delay specified"
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b04b8c1-a3ba-42b3-b212-12d2095da1c4",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0
        },
        "item": {
          "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
          "name": "Get UTF8 Encoded Response",
          "request": {
            "url": "https://postman-echo.com/encoding/utf8",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has charset in content-type header\", function () {",
                  "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/encoding/utf8",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3A1Z9irpTNzybQVx9q7tlJShd9HebqR7-y.llW4FoJFJFgB%2B3hY2VWonaJyD1W1U%2By%2BxByMXYEvJbE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "6a806c67-f677-44ee-be8b-b65607b3b5a6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:15 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"3d0e-bb1Z6nxw+98ped7xrePAFKVeCtU\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AvnVKIiJd1fyxT-0NYr6XEnzExMWPuGv2.tnQxdZODxL4mFgavIdijs3bdi2eXdJTyBGd%2F8xhx%2FPM; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "6203"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              104,
              49,
              62,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              68,
              101,
              109,
              111,
              60,
              47,
              104,
              49,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              112,
              62,
              84,
              97,
              107,
              101,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              60,
              97,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              117,
              99,
              115,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              85,
              84,
              70,
              45,
              56,
              45,
              100,
              101,
              109,
              111,
              46,
              116,
              120,
              116,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              117,
              99,
              115,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              85,
              84,
              70,
              45,
              56,
              45,
              100,
              101,
              109,
              111,
              46,
              116,
              120,
              116,
              60,
              47,
              97,
              62,
              60,
              47,
              112,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              112,
              114,
              101,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              84,
              70,
              45,
              56,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              32,
              115,
              97,
              109,
              112,
              108,
              101,
              32,
              112,
              108,
              97,
              105,
              110,
              45,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              77,
              97,
              114,
              107,
              117,
              115,
              32,
              75,
              117,
              104,
              110,
              32,
              91,
              203,
              136,
              109,
              97,
              202,
              179,
              107,
              202,
              138,
              115,
              32,
              107,
              117,
              203,
              144,
              110,
              93,
              32,
              60,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              62,
              32,
              226,
              128,
              148,
              32,
              50,
              48,
              48,
              50,
              45,
              48,
              55,
              45,
              50,
              53,
              10,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              101,
              32,
              65,
              83,
              67,
              73,
              73,
              32,
              99,
              111,
              109,
              112,
              97,
              116,
              105,
              98,
              108,
              101,
              32,
              85,
              84,
              70,
              45,
              56,
              32,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              108,
              97,
              105,
              110,
              45,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              73,
              83,
              79,
              32,
              49,
              48,
              54,
              52,
              54,
              45,
              49,
              44,
              32,
              97,
              110,
              100,
              32,
              82,
              70,
              67,
              32,
              50,
              50,
              55,
              57,
              46,
              10,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              115,
              105,
              110,
              103,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              47,
              85,
              84,
              70,
              45,
              56,
              44,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              119,
              114,
              105,
              116,
              101,
              32,
              105,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              99,
              111,
              100,
              101,
              32,
              116,
              104,
              105,
              110,
              103,
              115,
              32,
              115,
              117,
              99,
              104,
              32,
              97,
              115,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              77,
              97,
              116,
              104,
              101,
              109,
              97,
              116,
              105,
              99,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              99,
              105,
              101,
              110,
              99,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              174,
              32,
              69,
              226,
              139,
              133,
              100,
              97,
              32,
              61,
              32,
              81,
              44,
              32,
              32,
              110,
              32,
              226,
              134,
              146,
              32,
              226,
              136,
              158,
              44,
              32,
              226,
              136,
              145,
              32,
              102,
              40,
              105,
              41,
              32,
              61,
              32,
              226,
              136,
              143,
              32,
              103,
              40,
              105,
              41,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              167,
              226,
              142,
              161,
              226,
              142,
              155,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              142,
              158,
              226,
              142,
              164,
              226,
              142,
              171,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              148,
              130,
              97,
              194,
              178,
              43,
              98,
              194,
              179,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              128,
              120,
              226,
              136,
              136,
              226,
              132,
              157,
              58,
              32,
              226,
              140,
              136,
              120,
              226,
              140,
              137,
              32,
              61,
              32,
              226,
              136,
              146,
              226,
              140,
              138,
              226,
              136,
              146,
              120,
              226,
              140,
              139,
              44,
              32,
              206,
              177,
              32,
              226,
              136,
              167,
              32,
              194,
              172,
              206,
              178,
              32,
              61,
              32,
              194,
              172,
              40,
              194,
              172,
              206,
              177,
              32,
              226,
              136,
              168,
              32,
              206,
              178,
              41,
              44,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              148,
              130,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              142,
              183,
              32,
              99,
              226,
              130,
              136,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              132,
              149,
              32,
              226,
              138,
              134,
              32,
              226,
              132,
              149,
              226,
              130,
              128,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              164,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              154,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              157,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              130,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              168,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              172,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              136,
              158,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              138,
              165,
              32,
              60,
              32,
              97,
              32,
              226,
              137,
              160,
              32,
              98,
              32,
              226,
              137,
              161,
              32,
              99,
              32,
              226,
              137,
              164,
              32,
              100,
              32,
              226,
              137,
              170,
              32,
              226,
              138,
              164,
              32,
              226,
              135,
              146,
              32,
              40,
              226,
              159,
              166,
              65,
              226,
              159,
              167,
              32,
              226,
              135,
              148,
              32,
              226,
              159,
              170,
              66,
              226,
              159,
              171,
              41,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              142,
              178,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              142,
              179,
              97,
              226,
              129,
              177,
              45,
              98,
              226,
              129,
              177,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              50,
              72,
              226,
              130,
              130,
              32,
              43,
              32,
              79,
              226,
              130,
              130,
              32,
              226,
              135,
              140,
              32,
              50,
              72,
              226,
              130,
              130,
              79,
              44,
              32,
              82,
              32,
              61,
              32,
              52,
              46,
              55,
              32,
              107,
              206,
              169,
              44,
              32,
              226,
              140,
              128,
              32,
              50,
              48,
              48,
              32,
              109,
              109,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              169,
              226,
              142,
              163,
              226,
              142,
              157,
              105,
              61,
              49,
              32,
              32,
              32,
              32,
              226,
              142,
              160,
              226,
              142,
              166,
              226,
              142,
              173,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              76,
              105,
              110,
              103,
              117,
              105,
              115,
              116,
              105,
              99,
              115,
              32,
              97,
              110,
              100,
              32,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              97,
              114,
              105,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              195,
              176,
              105,
              32,
              196,
              177,
              110,
              116,
              201,
              153,
              203,
              136,
              110,
              195,
              166,
              202,
              131,
              201,
              153,
              110,
              201,
              153,
              108,
              32,
              102,
              201,
              153,
              203,
              136,
              110,
              201,
              155,
              116,
              196,
              177,
              107,
              32,
              201,
              153,
              115,
              111,
              202,
              138,
              115,
              105,
              203,
              136,
              101,
              196,
              177,
              202,
              131,
              110,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              89,
              32,
              91,
              203,
              136,
              202,
              143,
              112,
              115,
              105,
              108,
              201,
              148,
              110,
              93,
              44,
              32,
              89,
              101,
              110,
              32,
              91,
              106,
              201,
              155,
              110,
              93,
              44,
              32,
              89,
              111,
              103,
              97,
              32,
              91,
              203,
              136,
              106,
              111,
              203,
              144,
              103,
              201,
              145,
              93,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              80,
              76,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              40,
              86,
              226,
              141,
              179,
              86,
              41,
              61,
              226,
              141,
              179,
              226,
              141,
              180,
              86,
              41,
              47,
              86,
              226,
              134,
              144,
              44,
              86,
              32,
              32,
              32,
              32,
              226,
              140,
              183,
              226,
              134,
              144,
              226,
              141,
              179,
              226,
              134,
              146,
              226,
              141,
              180,
              226,
              136,
              134,
              226,
              136,
              135,
              226,
              138,
              131,
              226,
              128,
              190,
              226,
              141,
              142,
              226,
              141,
              149,
              226,
              140,
              136,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              78,
              105,
              99,
              101,
              114,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              32,
              105,
              110,
              32,
              112,
              108,
              97,
              105,
              110,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              151,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              152,
              115,
              105,
              110,
              103,
              108,
              101,
              226,
              128,
              153,
              32,
              97,
              110,
              100,
              32,
              226,
              128,
              156,
              100,
              111,
              117,
              98,
              108,
              101,
              226,
              128,
              157,
              32,
              113,
              117,
              111,
              116,
              101,
              115,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              67,
              117,
              114,
              108,
              121,
              32,
              97,
              112,
              111,
              115,
              116,
              114,
              111,
              112,
              104,
              101,
              115,
              58,
              32,
              226,
              128,
              156,
              87,
              101,
              226,
              128,
              153,
              118,
              101,
              32,
              98,
              101,
              101,
              110,
              32,
              104,
              101,
              114,
              101,
              226,
              128,
              157,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              76,
              97,
              116,
              105,
              110,
              45,
              49,
              32,
              97,
              112,
              111,
              115,
              116,
              114,
              111,
              112,
              104,
              101,
              32,
              97,
              110,
              100,
              32,
              97,
              99,
              99,
              101,
              110,
              116,
              115,
              58,
              32,
              39,
              194,
              180,
              96,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              154,
              100,
              101,
              117,
              116,
              115,
              99,
              104,
              101,
              226,
              128,
              152,
              32,
              226,
              128,
              158,
              65,
              110,
              102,
              195,
              188,
              104,
              114,
              117,
              110,
              103,
              115,
              122,
              101,
              105,
              99,
              104,
              101,
              110,
              226,
              128,
              156,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              160,
              44,
              32,
              226,
              128,
              161,
              44,
              32,
              226,
              128,
              176,
              44,
              32,
              226,
              128,
              162,
              44,
              32,
              51,
              226,
              128,
              147,
              52,
              44,
              32,
              226,
              128,
              148,
              44,
              32,
              226,
              136,
              146,
              53,
              47,
              43,
              53,
              44,
              32,
              226,
              132,
              162,
              44,
              32,
              226,
              128,
              166,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              65,
              83,
              67,
              73,
              73,
              32,
              115,
              97,
              102,
              101,
              116,
              121,
              32,
              116,
              101,
              115,
              116,
              58,
              32,
              49,
              108,
              73,
              124,
              44,
              32,
              48,
              79,
              68,
              44,
              32,
              56,
              66,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              116,
              104,
              101,
              32,
              101,
              117,
              114,
              111,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              58,
              32,
              226,
              148,
              130,
              32,
              49,
              52,
              46,
              57,
              53,
              32,
              226,
              130,
              172,
              32,
              226,
              148,
              130,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              157,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              67,
              111,
              109,
              98,
              105,
              110,
              105,
              110,
              103,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              84,
              65,
              82,
              71,
              206,
              155,
              204,
              138,
              84,
              69,
              32,
              83,
              71,
              45,
              49,
              44,
              32,
              97,
              32,
              61,
              32,
              118,
              204,
              135,
              32,
              61,
              32,
              114,
              204,
              136,
              44,
              32,
              97,
              226,
              131,
              145,
              32,
              226,
              138,
              165,
              32,
              98,
              226,
              131,
              145,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              114,
              101,
              101,
              107,
              32,
              40,
              105,
              110,
              32,
              80,
              111,
              108,
              121,
              116,
              111,
              110,
              105,
              99,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              101,
              32,
              71,
              114,
              101,
              101,
              107,
              32,
              97,
              110,
              116,
              104,
              101,
              109,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              163,
              225,
              189,
              178,
              32,
              206,
              179,
              206,
              189,
              207,
              137,
              207,
              129,
              225,
              189,
              183,
              206,
              182,
              207,
              137,
              32,
              225,
              188,
              128,
              207,
              128,
              225,
              189,
              184,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              206,
              186,
              225,
              189,
              185,
              207,
              136,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              32,
              207,
              131,
              207,
              128,
              206,
              177,
              206,
              184,
              206,
              185,
              206,
              191,
              225,
              191,
              166,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              207,
              132,
              207,
              129,
              206,
              191,
              206,
              188,
              206,
              181,
              207,
              129,
              225,
              189,
              181,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              131,
              225,
              189,
              178,
              32,
              206,
              179,
              206,
              189,
              207,
              137,
              207,
              129,
              225,
              189,
              183,
              206,
              182,
              207,
              137,
              32,
              225,
              188,
              128,
              207,
              128,
              225,
              189,
              184,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              132,
              207,
              136,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              206,
              191,
              225,
              189,
              186,
              32,
              206,
              188,
              225,
              189,
              178,
              32,
              206,
              178,
              225,
              189,
              183,
              206,
              177,
              32,
              206,
              188,
              206,
              181,
              207,
              132,
              207,
              129,
              225,
              189,
              177,
              206,
              181,
              206,
              185,
              32,
              207,
              132,
              225,
              189,
              180,
              32,
              206,
              179,
              225,
              191,
              134,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              190,
              191,
              206,
              145,
              207,
              128,
              225,
              190,
              191,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              186,
              225,
              189,
              185,
              206,
              186,
              206,
              186,
              206,
              177,
              206,
              187,
              206,
              177,
              32,
              206,
              178,
              206,
              179,
              206,
              177,
              206,
              187,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              191,
              182,
              206,
              189,
              32,
              225,
              191,
              190,
              206,
              149,
              206,
              187,
              206,
              187,
              225,
              189,
              181,
              206,
              189,
              207,
              137,
              206,
              189,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              225,
              188,
              177,
              206,
              181,
              207,
              129,
              225,
              189,
              177,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              131,
              225,
              189,
              176,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              191,
              182,
              207,
              132,
              206,
              177,
              32,
              225,
              188,
              128,
              206,
              189,
              206,
              180,
              207,
              129,
              206,
              181,
              206,
              185,
              207,
              137,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              135,
              206,
              177,
              225,
              191,
              150,
              207,
              129,
              206,
              181,
              44,
              32,
              225,
              189,
              166,
              32,
              207,
              135,
              206,
              177,
              225,
              191,
              150,
              207,
              129,
              206,
              181,
              44,
              32,
              225,
              190,
              191,
              206,
              149,
              206,
              187,
              206,
              181,
              207,
              133,
              206,
              184,
              206,
              181,
              207,
              129,
              206,
              185,
              225,
              189,
              177,
              33,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              115,
              112,
              101,
              101,
              99,
              104,
              32,
              111,
              102,
              32,
              68,
              101,
              109,
              111,
              115,
              116,
              104,
              101,
              110,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              52,
              116,
              104,
              32,
              99,
              101,
              110,
              116,
              117,
              114,
              121,
              32,
              66,
              67,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              159,
              225,
              189,
              144,
              207,
              135,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              177,
              225,
              189,
              144,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              128,
              206,
              177,
              207,
              129,
              225,
              189,
              183,
              207,
              131,
              207,
              132,
              206,
              177,
              207,
              132,
              206,
              177,
              225,
              189,
              183,
              32,
              206,
              188,
              206,
              191,
              206,
              185,
              32,
              206,
              179,
              206,
              185,
              206,
              179,
              206,
              189,
              225,
              189,
              189,
              207,
              131,
              206,
              186,
              206,
              181,
              206,
              185,
              206,
              189,
              44,
              32,
              225,
              189,
              166,
              32,
              225,
              188,
              132,
              206,
              189,
              206,
              180,
              207,
              129,
              206,
              181,
              207,
              130,
              32,
              225,
              190,
              191,
              206,
              145,
              206,
              184,
              206,
              183,
              206,
              189,
              206,
              177,
              225,
              191,
              150,
              206,
              191,
              206,
              185,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              177,
              206,
              189,
              32,
              207,
              132,
              225,
              190,
              191,
              32,
              206,
              181,
              225,
              188,
              176,
              207,
              130,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              177,
              206,
              179,
              206,
              188,
              206,
              177,
              207,
              132,
              206,
              177,
              32,
              225,
              188,
              128,
              207,
              128,
              206,
              191,
              206,
              178,
              206,
              187,
              225,
              189,
              179,
              207,
              136,
              207,
              137,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              177,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              184,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              207,
              133,
              207,
              130,
              32,
              206,
              191,
              225,
              189,
              147,
              207,
              130,
              32,
              225,
              188,
              128,
              206,
              186,
              206,
              191,
              225,
              189,
              187,
              207,
              137,
              206,
              135,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              32,
              206,
              188,
              225,
              189,
              178,
              206,
              189,
              32,
              206,
              179,
              225,
              189,
              176,
              207,
              129,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              207,
              133,
              207,
              130,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              166,
              225,
              189,
              183,
              206,
              187,
              206,
              185,
              207,
              128,
              207,
              128,
              206,
              191,
              206,
              189,
              32,
              225,
              189,
              129,
              207,
              129,
              225,
              191,
              182,
              32,
              206,
              179,
              206,
              185,
              206,
              179,
              206,
              189,
              206,
              191,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              191,
              207,
              133,
              207,
              130,
              44,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              180,
              225,
              189,
              178,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              177,
              206,
              179,
              206,
              188,
              206,
              177,
              207,
              132,
              225,
              190,
              191,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              181,
              225,
              188,
              176,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              207,
              132,
              206,
              191,
              32,
              207,
              128,
              207,
              129,
              206,
              191,
              225,
              189,
              181,
              206,
              186,
              206,
              191,
              206,
              189,
              207,
              132,
              206,
              177,
              44,
              32,
              32,
              225,
              189,
              165,
              207,
              131,
              206,
              184,
              225,
              190,
              191,
              32,
              225,
              189,
              133,
              207,
              128,
              207,
              137,
              207,
              130,
              32,
              206,
              188,
              225,
              189,
              180,
              32,
              207,
              128,
              206,
              181,
              206,
              185,
              207,
              131,
              225,
              189,
              185,
              206,
              188,
              206,
              181,
              206,
              184,
              225,
              190,
              191,
              32,
              206,
              177,
              225,
              189,
              144,
              207,
              132,
              206,
              191,
              225,
              189,
              182,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              207,
              129,
              206,
              191,
              206,
              189,
              32,
              206,
              186,
              206,
              177,
              206,
              186,
              225,
              191,
              182,
              207,
              130,
              32,
              207,
              131,
              206,
              186,
              225,
              189,
              179,
              207,
              136,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              180,
              225,
              189,
              179,
              206,
              191,
              206,
              189,
              46,
              32,
              206,
              191,
              225,
              189,
              144,
              206,
              180,
              225,
              189,
              179,
              206,
              189,
              32,
              206,
              191,
              225,
              189,
              150,
              206,
              189,
              32,
              225,
              188,
              132,
              206,
              187,
              206,
              187,
              206,
              191,
              32,
              206,
              188,
              206,
              191,
              206,
              185,
              32,
              206,
              180,
              206,
              191,
              206,
              186,
              206,
              191,
              225,
              191,
              166,
              207,
              131,
              206,
              185,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              191,
              225,
              188,
              177,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              132,
              206,
              191,
              206,
              185,
              206,
              177,
              225,
              191,
              166,
              207,
              132,
              206,
              177,
              32,
              206,
              187,
              225,
              189,
              179,
              206,
              179,
              206,
              191,
              206,
              189,
              207,
              132,
              206,
              181,
              207,
              130,
              32,
              225,
              188,
              162,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              145,
              207,
              128,
              225,
              189,
              185,
              206,
              184,
              206,
              181,
              207,
              131,
              206,
              185,
              206,
              189,
              44,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              225,
              188,
              167,
              207,
              130,
              32,
              206,
              178,
              206,
              191,
              207,
              133,
              206,
              187,
              206,
              181,
              225,
              189,
              187,
              206,
              181,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              191,
              225,
              189,
              144,
              207,
              135,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              206,
              191,
              225,
              189,
              150,
              207,
              131,
              206,
              177,
              206,
              189,
              32,
              207,
              128,
              206,
              177,
              207,
              129,
              206,
              185,
              207,
              131,
              207,
              132,
              225,
              189,
              177,
              206,
              189,
              207,
              132,
              206,
              181,
              207,
              130,
              32,
              225,
              189,
              145,
              206,
              188,
              225,
              191,
              150,
              206,
              189,
              32,
              225,
              188,
              129,
              206,
              188,
              206,
              177,
              207,
              129,
              207,
              132,
              225,
              189,
              177,
              206,
              189,
              206,
              181,
              206,
              185,
              206,
              189,
              46,
              32,
              225,
              188,
              144,
              206,
              179,
              225,
              189,
              188,
              32,
              206,
              180,
              225,
              189,
              179,
              44,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              185,
              32,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              206,
              191,
              207,
              132,
              225,
              190,
              191,
              32,
              225,
              188,
              144,
              206,
              190,
              225,
              191,
              134,
              206,
              189,
              32,
              207,
              132,
              225,
              191,
              135,
              32,
              207,
              128,
              225,
              189,
              185,
              206,
              187,
              206,
              181,
              206,
              185,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              177,
              225,
              189,
              145,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              32,
              225,
              188,
              148,
              207,
              135,
              206,
              181,
              206,
              185,
              206,
              189,
              32,
              225,
              188,
              128,
              207,
              131,
              207,
              134,
              206,
              177,
              206,
              187,
              225,
              191,
              182,
              207,
              130,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              206,
              166,
              225,
              189,
              183,
              206,
              187,
              206,
              185,
              207,
              128,
              207,
              128,
              206,
              191,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              206,
              188,
              225,
              189,
              177,
              206,
              187,
              225,
              190,
              191,
              32,
              225,
              188,
              128,
              206,
              186,
              207,
              129,
              206,
              185,
              206,
              178,
              225,
              191,
              182,
              207,
              130,
              32,
              206,
              191,
              225,
              188,
              182,
              206,
              180,
              206,
              177,
              206,
              135,
              32,
              225,
              188,
              144,
              207,
              128,
              225,
              190,
              191,
              32,
              225,
              188,
              144,
              206,
              188,
              206,
              191,
              225,
              191,
              166,
              32,
              206,
              179,
              225,
              189,
              177,
              207,
              129,
              44,
              32,
              206,
              191,
              225,
              189,
              144,
              32,
              207,
              128,
              225,
              189,
              177,
              206,
              187,
              206,
              177,
              206,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              179,
              225,
              189,
              179,
              206,
              179,
              206,
              191,
              206,
              189,
              206,
              181,
              206,
              189,
              32,
              207,
              132,
              206,
              177,
              225,
              191,
              166,
              207,
              132,
              225,
              190,
              191,
              32,
              225,
              188,
              128,
              206,
              188,
              207,
              134,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              207,
              129,
              206,
              177,
              206,
              135,
              32,
              206,
              189,
              225,
              191,
              166,
              206,
              189,
              32,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              207,
              132,
              206,
              191,
              206,
              185,
              32,
              207,
              128,
              225,
              189,
              179,
              207,
              128,
              206,
              181,
              206,
              185,
              207,
              131,
              206,
              188,
              206,
              177,
              206,
              185,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              206,
              184,
              225,
              190,
              191,
              32,
              225,
              188,
              177,
              206,
              186,
              206,
              177,
              206,
              189,
              225,
              189,
              184,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              207,
              129,
              206,
              191,
              206,
              187,
              206,
              177,
              206,
              178,
              206,
              181,
              225,
              191,
              150,
              206,
              189,
              32,
              225,
              188,
              161,
              206,
              188,
              225,
              191,
              150,
              206,
              189,
              32,
              206,
              181,
              225,
              188,
              182,
              206,
              189,
              206,
              177,
              206,
              185,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              189,
              207,
              132,
              206,
              183,
              206,
              189,
              44,
              32,
              225,
              189,
              133,
              207,
              128,
              207,
              137,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              32,
              207,
              131,
              207,
              133,
              206,
              188,
              206,
              188,
              225,
              189,
              177,
              207,
              135,
              206,
              191,
              207,
              133,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              131,
              225,
              189,
              189,
              207,
              131,
              206,
              191,
              206,
              188,
              206,
              181,
              206,
              189,
              46,
              32,
              225,
              188,
              144,
              225,
              189,
              176,
              206,
              189,
              32,
              206,
              179,
              225,
              189,
              176,
              207,
              129,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              207,
              132,
              206,
              191,
              32,
              206,
              178,
              206,
              181,
              206,
              178,
              206,
              177,
              225,
              189,
              183,
              207,
              137,
              207,
              130,
              32,
              225,
              189,
              145,
              207,
              128,
              225,
              189,
              177,
              207,
              129,
              206,
              190,
              225,
              191,
              131,
              44,
              32,
              207,
              132,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              189,
              183,
              206,
              189,
              206,
              177,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              181,
              207,
              132,
              206,
              177,
              225,
              189,
              183,
              32,
              207,
              132,
              206,
              185,
              207,
              130,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              225,
              189,
              131,
              206,
              189,
              32,
              207,
              132,
              207,
              129,
              225,
              189,
              185,
              207,
              128,
              206,
              191,
              206,
              189,
              32,
              225,
              188,
              144,
              206,
              190,
              225,
              189,
              179,
              207,
              131,
              207,
              132,
              206,
              177,
              206,
              185,
              32,
              207,
              131,
              206,
              186,
              206,
              191,
              207,
              128,
              206,
              181,
              225,
              191,
              150,
              206,
              189,
              206,
              135,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              182,
              206,
              189,
              32,
              206,
              180,
              225,
              189,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              188,
              128,
              207,
              129,
              207,
              135,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              128,
              207,
              129,
              206,
              184,
              225,
              191,
              182,
              207,
              130,
              32,
              225,
              189,
              145,
              207,
              128,
              206,
              191,
              206,
              184,
              225,
              189,
              179,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              32,
              206,
              188,
              225,
              189,
              177,
              207,
              132,
              206,
              177,
              206,
              185,
              206,
              191,
              206,
              189,
              32,
              225,
              188,
              161,
              206,
              179,
              206,
              191,
              225,
              191,
              166,
              206,
              188,
              206,
              177,
              206,
              185,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              181,
              206,
              187,
              206,
              181,
              207,
              133,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              32,
              225,
              189,
              129,
              206,
              189,
              207,
              132,
              206,
              185,
              206,
              189,
              206,
              191,
              225,
              191,
              166,
              206,
              189,
              32,
              207,
              128,
              206,
              191,
              206,
              185,
              206,
              181,
              225,
              191,
              150,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              206,
              189,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              148,
              206,
              183,
              206,
              188,
              206,
              191,
              207,
              131,
              206,
              184,
              225,
              189,
              179,
              206,
              189,
              206,
              191,
              207,
              133,
              207,
              130,
              44,
              32,
              206,
              147,
              225,
              191,
              189,
              32,
              225,
              190,
              191,
              206,
              159,
              206,
              187,
              207,
              133,
              206,
              189,
              206,
              184,
              206,
              185,
              206,
              177,
              206,
              186,
              225,
              189,
              184,
              207,
              130,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              101,
              111,
              114,
              103,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              99,
              111,
              110,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              146,
              225,
              131,
              151,
              225,
              131,
              174,
              225,
              131,
              157,
              225,
              131,
              149,
              225,
              131,
              151,
              32,
              225,
              131,
              144,
              225,
              131,
              174,
              225,
              131,
              154,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              148,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              151,
              32,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              146,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              144,
              225,
              131,
              151,
              225,
              131,
              148,
              32,
              225,
              131,
              161,
              225,
              131,
              144,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              144,
              225,
              131,
              168,
              225,
              131,
              157,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              157,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              164,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              150,
              225,
              131,
              148,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              172,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              225,
              131,
              147,
              44,
              32,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              170,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              32,
              49,
              48,
              45,
              49,
              50,
              32,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              162,
              225,
              131,
              161,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              165,
              46,
              32,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              32,
              225,
              131,
              146,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              156,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              168,
              225,
              131,
              152,
              46,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              164,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              225,
              131,
              168,
              225,
              131,
              148,
              225,
              131,
              176,
              225,
              131,
              153,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              32,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              144,
              225,
              131,
              147,
              32,
              225,
              131,
              155,
              225,
              131,
              161,
              225,
              131,
              157,
              225,
              131,
              164,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              157,
              225,
              131,
              161,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              148,
              225,
              131,
              165,
              225,
              131,
              161,
              225,
              131,
              158,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              32,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              148,
              225,
              131,
              151,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              146,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              32,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              146,
              225,
              131,
              157,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              170,
              225,
              131,
              144,
              225,
              131,
              144,
              32,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              162,
              225,
              131,
              152,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              156,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              150,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              154,
              225,
              131,
              157,
              225,
              131,
              153,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              150,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              44,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              157,
              225,
              131,
              167,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              157,
              225,
              131,
              158,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              163,
              225,
              131,
              154,
              32,
              225,
              131,
              161,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              225,
              131,
              144,
              44,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              157,
              225,
              131,
              167,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              152,
              225,
              131,
              151,
              32,
              225,
              131,
              158,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              146,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              32,
              225,
              131,
              168,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              164,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              165,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              163,
              225,
              131,
              168,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              144,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              155,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              157,
              225,
              131,
              149,
              225,
              131,
              144,
              225,
              131,
              156,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              155,
              225,
              131,
              158,
              225,
              131,
              152,
              225,
              131,
              163,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              163,
              225,
              131,
              154,
              32,
              225,
              131,
              161,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              117,
              115,
              115,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              99,
              111,
              110,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              151,
              208,
              176,
              209,
              128,
              208,
              181,
              208,
              179,
              208,
              184,
              209,
              129,
              209,
              130,
              209,
              128,
              208,
              184,
              209,
              128,
              209,
              131,
              208,
              185,
              209,
              130,
              208,
              181,
              209,
              129,
              209,
              140,
              32,
              209,
              129,
              208,
              181,
              208,
              185,
              209,
              135,
              208,
              176,
              209,
              129,
              32,
              208,
              189,
              208,
              176,
              32,
              208,
              148,
              208,
              181,
              209,
              129,
              209,
              143,
              209,
              130,
              209,
              131,
              209,
              142,
              32,
              208,
              156,
              208,
              181,
              208,
              182,
              208,
              180,
              209,
              131,
              208,
              189,
              208,
              176,
              209,
              128,
              208,
              190,
              208,
              180,
              208,
              189,
              209,
              131,
              209,
              142,
              32,
              208,
              154,
              208,
              190,
              208,
              189,
              209,
              132,
              208,
              181,
              209,
              128,
              208,
              181,
              208,
              189,
              209,
              134,
              208,
              184,
              209,
              142,
              32,
              208,
              191,
              208,
              190,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              208,
              186,
              208,
              190,
              209,
              130,
              208,
              190,
              209,
              128,
              208,
              176,
              209,
              143,
              32,
              209,
              129,
              208,
              190,
              209,
              129,
              209,
              130,
              208,
              190,
              208,
              184,
              209,
              130,
              209,
              129,
              209,
              143,
              32,
              49,
              48,
              45,
              49,
              50,
              32,
              208,
              188,
              208,
              176,
              209,
              128,
              209,
              130,
              208,
              176,
              32,
              49,
              57,
              57,
              55,
              32,
              208,
              179,
              208,
              190,
              208,
              180,
              208,
              176,
              32,
              208,
              178,
              32,
              208,
              156,
              208,
              176,
              208,
              185,
              208,
              189,
              209,
              134,
              208,
              181,
              32,
              208,
              178,
              32,
              208,
              147,
              208,
              181,
              209,
              128,
              208,
              188,
              208,
              176,
              208,
              189,
              208,
              184,
              208,
              184,
              46,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              154,
              208,
              190,
              208,
              189,
              209,
              132,
              208,
              181,
              209,
              128,
              208,
              181,
              208,
              189,
              209,
              134,
              208,
              184,
              209,
              143,
              32,
              209,
              129,
              208,
              190,
              208,
              177,
              208,
              181,
              209,
              128,
              208,
              181,
              209,
              130,
              32,
              209,
              136,
              208,
              184,
              209,
              128,
              208,
              190,
              208,
              186,
              208,
              184,
              208,
              185,
              32,
              208,
              186,
              209,
              128,
              209,
              131,
              208,
              179,
              32,
              209,
              141,
              208,
              186,
              209,
              129,
              208,
              191,
              208,
              181,
              209,
              128,
              209,
              130,
              208,
              190,
              208,
              178,
              32,
              208,
              191,
              208,
              190,
              32,
              32,
              208,
              178,
              208,
              190,
              208,
              191,
              209,
              128,
              208,
              190,
              209,
              129,
              208,
              176,
              208,
              188,
              32,
              208,
              179,
              208,
              187,
              208,
              190,
              208,
              177,
              208,
              176,
              208,
              187,
              209,
              140,
              208,
              189,
              208,
              190,
              208,
              179,
              208,
              190,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              152,
              208,
              189,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              208,
              181,
              209,
              130,
              208,
              176,
              32,
              208,
              184,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              208,
              187,
              208,
              190,
              208,
              186,
              208,
              176,
              208,
              187,
              208,
              184,
              208,
              183,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              184,
              32,
              208,
              184,
              32,
              208,
              184,
              208,
              189,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              190,
              208,
              189,
              208,
              176,
              208,
              187,
              208,
              184,
              208,
              183,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              184,
              44,
              32,
              208,
              178,
              208,
              190,
              208,
              191,
              208,
              187,
              208,
              190,
              209,
              137,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              142,
              32,
              208,
              184,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              191,
              209,
              128,
              208,
              184,
              208,
              188,
              208,
              181,
              208,
              189,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              142,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              208,
              178,
              32,
              209,
              128,
              208,
              176,
              208,
              183,
              208,
              187,
              208,
              184,
              209,
              135,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              208,
              190,
              208,
              191,
              208,
              181,
              209,
              128,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              190,
              208,
              189,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              209,
              129,
              208,
              184,
              209,
              129,
              209,
              130,
              208,
              181,
              208,
              188,
              208,
              176,
              209,
              133,
              32,
              208,
              184,
              32,
              208,
              191,
              209,
              128,
              208,
              190,
              208,
              179,
              209,
              128,
              208,
              176,
              208,
              188,
              208,
              188,
              208,
              189,
              209,
              139,
              209,
              133,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              191,
              209,
              128,
              208,
              184,
              208,
              187,
              208,
              190,
              208,
              182,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              143,
              209,
              133,
              44,
              32,
              209,
              136,
              209,
              128,
              208,
              184,
              209,
              132,
              209,
              130,
              208,
              176,
              209,
              133,
              44,
              32,
              208,
              178,
              208,
              181,
              209,
              128,
              209,
              129,
              209,
              130,
              208,
              186,
              208,
              181,
              32,
              208,
              184,
              32,
              208,
              188,
              208,
              189,
              208,
              190,
              208,
              179,
              208,
              190,
              209,
              143,
              208,
              183,
              209,
              139,
              209,
              135,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              208,
              186,
              208,
              190,
              208,
              188,
              208,
              191,
              209,
              140,
              209,
              142,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              209,
              129,
              208,
              184,
              209,
              129,
              209,
              130,
              208,
              181,
              208,
              188,
              208,
              176,
              209,
              133,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              97,
              105,
              32,
              40,
              85,
              67,
              83,
              32,
              76,
              101,
              118,
              101,
              108,
              32,
              50,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              120,
              99,
              101,
              114,
              112,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              112,
              111,
              101,
              116,
              114,
              121,
              32,
              111,
              110,
              32,
              84,
              104,
              101,
              32,
              82,
              111,
              109,
              97,
              110,
              99,
              101,
              32,
              111,
              102,
              32,
              84,
              104,
              101,
              32,
              84,
              104,
              114,
              101,
              101,
              32,
              75,
              105,
              110,
              103,
              100,
              111,
              109,
              115,
              32,
              40,
              97,
              32,
              67,
              104,
              105,
              110,
              101,
              115,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              108,
              97,
              115,
              115,
              105,
              99,
              32,
              39,
              83,
              97,
              110,
              32,
              71,
              117,
              97,
              39,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              91,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              124,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              143,
              32,
              224,
              185,
              129,
              224,
              184,
              156,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              184,
              148,
              224,
              184,
              180,
              224,
              184,
              153,
              224,
              184,
              174,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              170,
              224,
              184,
              183,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              184,
              161,
              224,
              185,
              130,
              224,
              184,
              151,
              224,
              184,
              163,
              224,
              184,
              161,
              224,
              185,
              129,
              224,
              184,
              170,
              224,
              184,
              153,
              224,
              184,
              170,
              224,
              184,
              177,
              224,
              184,
              135,
              224,
              185,
              128,
              224,
              184,
              167,
              224,
              184,
              138,
              32,
              32,
              224,
              184,
              158,
              224,
              184,
              163,
              224,
              184,
              176,
              224,
              184,
              155,
              224,
              184,
              129,
              224,
              185,
              128,
              224,
              184,
              129,
              224,
              184,
              168,
              224,
              184,
              129,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              154,
              224,
              184,
              185,
              224,
              185,
              138,
              224,
              184,
              129,
              224,
              184,
              185,
              224,
              185,
              137,
              224,
              184,
              130,
              224,
              184,
              182,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              185,
              131,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              185,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              170,
              224,
              184,
              180,
              224,
              184,
              154,
              224,
              184,
              170,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              129,
              224,
              184,
              169,
              224,
              184,
              177,
              224,
              184,
              149,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              162,
              224,
              185,
              140,
              224,
              184,
              129,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              184,
              153,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              185,
              129,
              224,
              184,
              165,
              224,
              184,
              150,
              224,
              184,
              177,
              224,
              184,
              148,
              224,
              185,
              132,
              224,
              184,
              155,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              170,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              132,
              224,
              185,
              140,
              224,
              185,
              132,
              224,
              184,
              139,
              224,
              184,
              163,
              224,
              185,
              137,
              224,
              185,
              130,
              224,
              184,
              135,
              224,
              185,
              136,
              224,
              185,
              128,
              224,
              184,
              130,
              224,
              184,
              165,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              154,
              224,
              184,
              178,
              224,
              184,
              155,
              224,
              184,
              177,
              224,
              184,
              141,
              224,
              184,
              141,
              224,
              184,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              151,
              224,
              184,
              163,
              224,
              184,
              135,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              150,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              130,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              151,
              224,
              184,
              181,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              151,
              224,
              184,
              181,
              224,
              185,
              136,
              224,
              184,
              158,
              224,
              184,
              182,
              224,
              185,
              136,
              224,
              184,
              135,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              154,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              136,
              224,
              184,
              182,
              224,
              184,
              135,
              224,
              184,
              167,
              224,
              184,
              180,
              224,
              184,
              155,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              149,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              184,
              129,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              184,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              130,
              224,
              184,
              174,
              224,
              184,
              136,
              224,
              184,
              180,
              224,
              185,
              139,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              163,
              224,
              184,
              181,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              151,
              224,
              184,
              177,
              224,
              184,
              158,
              224,
              184,
              151,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              167,
              224,
              184,
              171,
              224,
              184,
              177,
              224,
              184,
              167,
              224,
              185,
              128,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              161,
              224,
              184,
              178,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              184,
              162,
              224,
              184,
              136,
              224,
              184,
              176,
              224,
              184,
              134,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              161,
              224,
              184,
              148,
              224,
              184,
              138,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              167,
              224,
              184,
              149,
              224,
              184,
              177,
              224,
              184,
              167,
              224,
              184,
              170,
              224,
              184,
              179,
              224,
              184,
              132,
              224,
              184,
              177,
              224,
              184,
              141,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              128,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              153,
              224,
              184,
              130,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              185,
              132,
              224,
              184,
              170,
              224,
              185,
              132,
              224,
              184,
              165,
              224,
              185,
              136,
              224,
              185,
              128,
              224,
              184,
              170,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              136,
              224,
              184,
              178,
              224,
              184,
              129,
              224,
              185,
              128,
              224,
              184,
              132,
              224,
              184,
              171,
              224,
              184,
              178,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              163,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              184,
              155,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              130,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              165,
              224,
              184,
              162,
              224,
              184,
              173,
              224,
              184,
              178,
              224,
              184,
              170,
              224,
              184,
              177,
              224,
              184,
              141,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              157,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              162,
              224,
              184,
              173,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              184,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              184,
              162,
              224,
              184,
              184,
              224,
              185,
              129,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              185,
              131,
              224,
              184,
              171,
              224,
              185,
              137,
              224,
              185,
              129,
              224,
              184,
              149,
              224,
              184,
              129,
              224,
              184,
              129,
              224,
              184,
              177,
              224,
              184,
              153,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              131,
              224,
              184,
              138,
              224,
              185,
              137,
              224,
              184,
              170,
              224,
              184,
              178,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              153,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              183,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              185,
              131,
              224,
              184,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              158,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              165,
              224,
              184,
              180,
              224,
              184,
              137,
              224,
              184,
              184,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              184,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              181,
              224,
              184,
              129,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              129,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              185,
              128,
              224,
              184,
              171,
              224,
              184,
              149,
              224,
              184,
              184,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              138,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              158,
              224,
              184,
              168,
              224,
              184,
              136,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              135,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              184,
              178,
              224,
              184,
              159,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              163,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              185,
              132,
              224,
              184,
              171,
              224,
              185,
              137,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              149,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              163,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              178,
              224,
              184,
              134,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              159,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              136,
              224,
              184,
              153,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              163,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              162,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              164,
              224,
              185,
              133,
              224,
              184,
              171,
              224,
              184,
              178,
              224,
              185,
              131,
              224,
              184,
              132,
              224,
              184,
              163,
              224,
              184,
              132,
              224,
              185,
              137,
              224,
              184,
              179,
              224,
              184,
              138,
              224,
              184,
              185,
              224,
              184,
              129,
              224,
              184,
              185,
              224,
              185,
              137,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              163,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              135,
              224,
              184,
              129,
              224,
              185,
              140,
              32,
              224,
              184,
              175,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              84,
              104,
              101,
              32,
              97,
              98,
              111,
              118,
              101,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              119,
              111,
              45,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              116,
              101,
              120,
              116,
              46,
              32,
              73,
              102,
              32,
              99,
              111,
              109,
              98,
              105,
              110,
              105,
              110,
              103,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              108,
              121,
              44,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              110,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              97,
              108,
              105,
              103,
              110,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              32,
              97,
              98,
              111,
              118,
              101,
              46,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              116,
              104,
              105,
              111,
              112,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              80,
              114,
              111,
              118,
              101,
              114,
              98,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              65,
              109,
              104,
              97,
              114,
              105,
              99,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              176,
              225,
              136,
              155,
              225,
              139,
              173,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              179,
              225,
              136,
              168,
              225,
              136,
              181,
              32,
              225,
              138,
              149,
              225,
              140,
              137,
              225,
              136,
              165,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              138,
              168,
              225,
              136,
              176,
              225,
              136,
              181,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              165,
              225,
              136,
              139,
              32,
              225,
              138,
              171,
              225,
              136,
              136,
              225,
              138,
              157,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              225,
              138,
              160,
              225,
              137,
              163,
              225,
              137,
              180,
              32,
              225,
              137,
              160,
              225,
              137,
              134,
              225,
              136,
              152,
              225,
              140,
              160,
              225,
              138,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              140,
              140,
              225,
              140,
              165,
              32,
              225,
              139,
              171,
              225,
              136,
              136,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              137,
              129,
              225,
              136,
              157,
              225,
              140,
              165,
              225,
              138,
              147,
              32,
              225,
              138,
              144,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              176,
              225,
              136,
              128,
              32,
              225,
              137,
              160,
              225,
              136,
              149,
              225,
              136,
              141,
              225,
              136,
              153,
              32,
              225,
              137,
              133,
              225,
              137,
              164,
              32,
              225,
              137,
              163,
              225,
              139,
              173,
              225,
              140,
              160,
              225,
              140,
              163,
              32,
              225,
              138,
              149,
              225,
              140,
              163,
              225,
              137,
              181,
              32,
              225,
              137,
              160,
              225,
              140,
              136,
              225,
              139,
              176,
              225,
              136,
              136,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              138,
              160,
              225,
              141,
              141,
              32,
              225,
              139,
              136,
              225,
              136,
              136,
              225,
              136,
              157,
              225,
              137,
              179,
              32,
              225,
              137,
              160,
              225,
              137,
              133,
              225,
              137,
              164,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              179,
              225,
              136,
              189,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              140,
              165,
              32,
              225,
              137,
              160,
              225,
              137,
              160,
              225,
              136,
              139,
              32,
              225,
              139,
              179,
              225,
              139,
              139,
              32,
              225,
              137,
              176,
              225,
              136,
              152,
              225,
              137,
              179,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              178,
              225,
              137,
              176,
              225,
              136,
              168,
              225,
              140,
              137,
              225,
              136,
              153,
              32,
              225,
              139,
              173,
              225,
              139,
              176,
              225,
              136,
              168,
              225,
              140,
              141,
              225,
              136,
              153,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              128,
              225,
              136,
              181,
              32,
              225,
              137,
              160,
              225,
              137,
              128,
              225,
              136,
              181,
              225,
              141,
              165,
              32,
              225,
              139,
              149,
              225,
              138,
              149,
              225,
              137,
              129,
              225,
              136,
              139,
              225,
              136,
              141,
              32,
              225,
              137,
              160,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              136,
              169,
              32,
              225,
              139,
              173,
              225,
              136,
              132,
              225,
              139,
              179,
              225,
              136,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              181,
              225,
              136,
              173,
              32,
              225,
              137,
              162,
              225,
              139,
              171,
              225,
              137,
              165,
              225,
              136,
              173,
              32,
              225,
              138,
              160,
              225,
              138,
              149,
              225,
              137,
              160,
              225,
              136,
              179,
              32,
              225,
              139,
              171,
              225,
              136,
              181,
              225,
              136,
              173,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              176,
              225,
              139,
              141,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              140,
              133,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              32,
              225,
              140,
              137,
              225,
              136,
              168,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              176,
              225,
              139,
              179,
              225,
              139,
              176,
              225,
              136,
              173,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              139,
              156,
              225,
              136,
              173,
              32,
              225,
              139,
              168,
              225,
              138,
              168,
              225,
              141,
              136,
              225,
              137,
              176,
              225,
              139,
              141,
              225,
              138,
              149,
              32,
              225,
              140,
              137,
              225,
              136,
              174,
              225,
              136,
              174,
              32,
              225,
              136,
              179,
              225,
              139,
              173,
              225,
              139,
              152,
              225,
              140,
              139,
              225,
              139,
              141,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              139,
              181,
              225,
              136,
              173,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              140,
              142,
              225,
              136,
              168,
              225,
              137,
              164,
              225,
              137,
              181,
              32,
              225,
              136,
              140,
              225,
              137,
              163,
              225,
              141,
              165,
              32,
              225,
              137,
              162,
              225,
              139,
              171,
              225,
              139,
              169,
              225,
              137,
              181,
              32,
              225,
              139,
              173,
              225,
              136,
              181,
              225,
              137,
              133,
              32,
              225,
              137,
              163,
              225,
              139,
              171,
              225,
              139,
              169,
              225,
              137,
              181,
              32,
              225,
              139,
              171,
              225,
              140,
              160,
              225,
              136,
              141,
              225,
              137,
              133,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              165,
              225,
              136,
              171,
              32,
              225,
              138,
              168,
              225,
              136,
              152,
              225,
              141,
              141,
              225,
              137,
              179,
              225,
              137,
              181,
              32,
              225,
              136,
              141,
              225,
              140,
              132,
              225,
              138,
              149,
              32,
              225,
              136,
              139,
              225,
              141,
              139,
              225,
              137,
              179,
              225,
              137,
              181,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              147,
              225,
              137,
              163,
              225,
              139,
              173,
              32,
              225,
              136,
              155,
              225,
              139,
              176,
              225,
              136,
              170,
              225,
              139,
              171,
              32,
              225,
              139,
              168,
              225,
              136,
              136,
              225,
              139,
              141,
              225,
              141,
              165,
              32,
              225,
              140,
              141,
              225,
              138,
              149,
              225,
              139,
              181,
              32,
              225,
              139,
              173,
              225,
              139,
              158,
              32,
              225,
              139,
              173,
              225,
              139,
              158,
              225,
              136,
              171,
              225,
              136,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              138,
              165,
              225,
              136,
              181,
              225,
              136,
              139,
              225,
              136,
              157,
              32,
              225,
              138,
              160,
              225,
              140,
              136,
              225,
              136,
              169,
              32,
              225,
              136,
              152,
              225,
              138,
              171,
              32,
              225,
              139,
              168,
              225,
              138,
              160,
              225,
              136,
              158,
              225,
              136,
              171,
              32,
              225,
              138,
              160,
              225,
              140,
              136,
              225,
              136,
              169,
              32,
              225,
              139,
              139,
              225,
              136,
              173,
              225,
              138,
              171,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              176,
              225,
              138,
              149,
              225,
              140,
              139,
              225,
              136,
              142,
              32,
              225,
              137,
              162,
              225,
              137,
              176,
              225,
              141,
              137,
              32,
              225,
              137,
              176,
              225,
              136,
              152,
              225,
              136,
              141,
              225,
              136,
              182,
              32,
              225,
              137,
              163,
              225,
              141,
              137,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              136,
              225,
              139,
              179,
              225,
              140,
              133,
              225,
              136,
              133,
              32,
              225,
              136,
              155,
              225,
              136,
              173,
              32,
              225,
              137,
              162,
              225,
              136,
              134,
              225,
              138,
              149,
              32,
              225,
              140,
              168,
              225,
              136,
              173,
              225,
              136,
              181,
              225,
              136,
              133,
              32,
              225,
              138,
              160,
              225,
              137,
              181,
              225,
              136,
              139,
              225,
              136,
              176,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              136,
              173,
              225,
              136,
              133,
              225,
              138,
              149,
              32,
              225,
              137,
              160,
              225,
              141,
              141,
              225,
              136,
              171,
              225,
              136,
              189,
              225,
              136,
              133,
              32,
              225,
              136,
              141,
              225,
              138,
              173,
              32,
              225,
              139,
              152,
              225,
              136,
              173,
              225,
              140,
              139,
              225,
              141,
              162,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              117,
              110,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              154,
              187,
              225,
              155,
              150,
              32,
              225,
              154,
              179,
              225,
              154,
              185,
              225,
              154,
              171,
              225,
              154,
              166,
              32,
              225,
              154,
              166,
              225,
              154,
              171,
              225,
              155,
              143,
              32,
              225,
              154,
              187,
              225,
              155,
              150,
              32,
              225,
              155,
              146,
              225,
              154,
              162,
              225,
              155,
              158,
              225,
              155,
              150,
              32,
              225,
              154,
              169,
              225,
              154,
              190,
              32,
              225,
              154,
              166,
              225,
              154,
              171,
              225,
              155,
              151,
              32,
              225,
              155,
              154,
              225,
              154,
              170,
              225,
              154,
              190,
              225,
              155,
              158,
              225,
              155,
              150,
              32,
              225,
              154,
              190,
              225,
              154,
              169,
              225,
              154,
              177,
              225,
              154,
              166,
              225,
              154,
              185,
              225,
              155,
              150,
              225,
              154,
              170,
              225,
              154,
              177,
              225,
              155,
              158,
              225,
              154,
              162,
              225,
              155,
              151,
              32,
              225,
              154,
              185,
              225,
              155,
              129,
              225,
              154,
              166,
              32,
              225,
              154,
              166,
              225,
              154,
              170,
              32,
              225,
              154,
              185,
              225,
              155,
              150,
              225,
              155,
              165,
              225,
              154,
              171,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              79,
              108,
              100,
              32,
              69,
              110,
              103,
              108,
              105,
              115,
              104,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              116,
              114,
              97,
              110,
              115,
              99,
              114,
              105,
              98,
              101,
              100,
              32,
              105,
              110,
              116,
              111,
              32,
              76,
              97,
              116,
              105,
              110,
              32,
              114,
              101,
              97,
              100,
              115,
              32,
              39,
              72,
              101,
              32,
              99,
              119,
              97,
              101,
              116,
              104,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              98,
              117,
              100,
              101,
              32,
              116,
              104,
              97,
              101,
              109,
              32,
              108,
              97,
              110,
              100,
              101,
              32,
              110,
              111,
              114,
              116,
              104,
              119,
              101,
              97,
              114,
              100,
              117,
              109,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              97,
              32,
              87,
              101,
              115,
              116,
              115,
              97,
              101,
              46,
              39,
              32,
              97,
              110,
              100,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              39,
              72,
              101,
              32,
              115,
              97,
              105,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              101,
              32,
              108,
              105,
              118,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              114,
              116,
              104,
              101,
              114,
              110,
              32,
              108,
              97,
              110,
              100,
              32,
              110,
              101,
              97,
              114,
              32,
              116,
              104,
              101,
              32,
              87,
              101,
              115,
              116,
              101,
              114,
              110,
              32,
              83,
              101,
              97,
              46,
              39,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              66,
              114,
              97,
              105,
              108,
              108,
              101,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              140,
              226,
              160,
              129,
              226,
              160,
              167,
              226,
              160,
              145,
              32,
              226,
              160,
              188,
              226,
              160,
              129,
              226,
              160,
              146,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              161,
              163,
              226,
              160,
              149,
              226,
              160,
              140,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              146,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              131,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              148,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              185,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              157,
              226,
              160,
              149,
              32,
              226,
              160,
              153,
              226,
              160,
              179,
              226,
              160,
              131,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              177,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              145,
              226,
              160,
              167,
              226,
              160,
              187,
              32,
              226,
              160,
              129,
              226,
              160,
              131,
              226,
              160,
              179,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              138,
              226,
              160,
              140,
              226,
              160,
              187,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              131,
              226,
              160,
              165,
              226,
              160,
              151,
              226,
              160,
              138,
              226,
              160,
              129,
              226,
              160,
              135,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              155,
              226,
              160,
              157,
              226,
              160,
              171,
              32,
              226,
              160,
              131,
              226,
              160,
              185,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              187,
              226,
              160,
              155,
              226,
              160,
              185,
              226,
              160,
              141,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              187,
              226,
              160,
              133,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              165,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              187,
              226,
              160,
              158,
              226,
              160,
              129,
              226,
              160,
              133,
              226,
              160,
              187,
              226,
              160,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              161,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              139,
              32,
              226,
              160,
              141,
              226,
              160,
              179,
              226,
              160,
              151,
              226,
              160,
              157,
              226,
              160,
              187,
              226,
              160,
              178,
              32,
              226,
              161,
              142,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              155,
              226,
              160,
              145,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              155,
              226,
              160,
              157,
              226,
              160,
              171,
              32,
              226,
              160,
              138,
              226,
              160,
              158,
              226,
              160,
              178,
              32,
              226,
              161,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              142,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              141,
              226,
              160,
              145,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              155,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              153,
              32,
              226,
              160,
              165,
              226,
              160,
              143,
              226,
              160,
              149,
              226,
              160,
              157,
              32,
              226,
              160,
              176,
              226,
              161,
              161,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              130,
              32,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              185,
              226,
              160,
              185,
              226,
              160,
              148,
              226,
              160,
              155,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              161,
              226,
              160,
              149,
              226,
              160,
              142,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              143,
              226,
              160,
              165,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              149,
              226,
              160,
              135,
              226,
              160,
              153,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              148,
              226,
              160,
              153,
              226,
              160,
              150,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              176,
              226,
              160,
              158,
              32,
              226,
              160,
              141,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              157,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              142,
              226,
              160,
              129,
              226,
              160,
              185,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              133,
              226,
              160,
              157,
              226,
              160,
              170,
              226,
              160,
              130,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              170,
              226,
              160,
              157,
              32,
              226,
              160,
              133,
              226,
              160,
              157,
              226,
              160,
              170,
              226,
              160,
              135,
              226,
              160,
              171,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              130,
              32,
              226,
              160,
              177,
              226,
              160,
              129,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              143,
              226,
              160,
              156,
              226,
              160,
              158,
              226,
              160,
              138,
              226,
              160,
              138,
              226,
              160,
              165,
              226,
              160,
              135,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              185,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              131,
              226,
              160,
              179,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              163,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              167,
              226,
              160,
              145,
              32,
              226,
              160,
              131,
              226,
              160,
              145,
              226,
              160,
              178,
              32,
              226,
              160,
              148,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              148,
              226,
              160,
              171,
              226,
              160,
              130,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              226,
              160,
              142,
              226,
              160,
              145,
              226,
              160,
              135,
              226,
              160,
              139,
              226,
              160,
              130,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              156,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              138,
              226,
              160,
              149,
              226,
              160,
              139,
              226,
              160,
              139,
              226,
              160,
              148,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              140,
              32,
              226,
              160,
              143,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              138,
              226,
              160,
              145,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              141,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              155,
              226,
              160,
              187,
              226,
              160,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              148,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              151,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              178,
              32,
              226,
              161,
              131,
              226,
              160,
              165,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              142,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              141,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              179,
              226,
              160,
              151,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              140,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              148,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              134,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              32,
              226,
              160,
              165,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              226,
              160,
              170,
              226,
              160,
              171,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              169,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              32,
              226,
              160,
              157,
              226,
              160,
              149,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              140,
              226,
              160,
              165,
              226,
              160,
              151,
              226,
              160,
              131,
              32,
              226,
              160,
              138,
              226,
              160,
              158,
              226,
              160,
              130,
              32,
              226,
              160,
              149,
              226,
              160,
              151,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              161,
              138,
              226,
              160,
              179,
              226,
              160,
              157,
              226,
              160,
              158,
              226,
              160,
              151,
              226,
              160,
              185,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              145,
              32,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              135,
              32,
              226,
              160,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              145,
              32,
              226,
              160,
              143,
              226,
              160,
              187,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              158,
              32,
              226,
              160,
              141,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              143,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              130,
              32,
              226,
              160,
              145,
              226,
              160,
              141,
              226,
              160,
              143,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              138,
              226,
              160,
              138,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              226,
              160,
              185,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              84,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              99,
              111,
              117,
              112,
              108,
              101,
              32,
              111,
              102,
              32,
              112,
              97,
              114,
              97,
              103,
              114,
              97,
              112,
              104,
              115,
              32,
              111,
              102,
              32,
              34,
              65,
              32,
              67,
              104,
              114,
              105,
              115,
              116,
              109,
              97,
              115,
              32,
              67,
              97,
              114,
              111,
              108,
              34,
              32,
              98,
              121,
              32,
              68,
              105,
              99,
              107,
              101,
              110,
              115,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              67,
              111,
              109,
              112,
              97,
              99,
              116,
              32,
              102,
              111,
              110,
              116,
              32,
              115,
              101,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              116,
              101,
              120,
              116,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              32,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              32,
              194,
              163,
              194,
              169,
              194,
              181,
              195,
              128,
              195,
              134,
              195,
              150,
              195,
              158,
              195,
              159,
              195,
              169,
              195,
              182,
              195,
              191,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              128,
              147,
              226,
              128,
              148,
              226,
              128,
              152,
              226,
              128,
              156,
              226,
              128,
              157,
              226,
              128,
              158,
              226,
              128,
              160,
              226,
              128,
              162,
              226,
              128,
              166,
              226,
              128,
              176,
              226,
              132,
              162,
              197,
              147,
              197,
              160,
              197,
              184,
              197,
              190,
              226,
              130,
              172,
              32,
              206,
              145,
              206,
              146,
              206,
              147,
              206,
              148,
              206,
              169,
              206,
              177,
              206,
              178,
              206,
              179,
              206,
              180,
              207,
              137,
              32,
              208,
              144,
              208,
              145,
              208,
              146,
              208,
              147,
              208,
              148,
              208,
              176,
              208,
              177,
              208,
              178,
              208,
              179,
              208,
              180,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              128,
              226,
              136,
              130,
              226,
              136,
              136,
              226,
              132,
              157,
              226,
              136,
              167,
              226,
              136,
              170,
              226,
              137,
              161,
              226,
              136,
              158,
              32,
              226,
              134,
              145,
              226,
              134,
              151,
              226,
              134,
              168,
              226,
              134,
              187,
              226,
              135,
              163,
              32,
              226,
              148,
              144,
              226,
              148,
              188,
              226,
              149,
              148,
              226,
              149,
              152,
              226,
              150,
              145,
              226,
              150,
              186,
              226,
              152,
              186,
              226,
              153,
              128,
              32,
              239,
              172,
              129,
              239,
              191,
              189,
              226,
              145,
              128,
              226,
              130,
              130,
              225,
              188,
              160,
              225,
              184,
              130,
              211,
              165,
              225,
              186,
              132,
              201,
              144,
              203,
              144,
              226,
              141,
              142,
              215,
              144,
              212,
              177,
              225,
              131,
              144,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              114,
              101,
              101,
              116,
              105,
              110,
              103,
              115,
              32,
              105,
              110,
              32,
              118,
              97,
              114,
              105,
              111,
              117,
              115,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              72,
              101,
              108,
              108,
              111,
              32,
              119,
              111,
              114,
              108,
              100,
              44,
              32,
              206,
              154,
              206,
              177,
              206,
              187,
              206,
              183,
              206,
              188,
              225,
              189,
              179,
              207,
              129,
              206,
              177,
              32,
              206,
              186,
              225,
              189,
              185,
              207,
              131,
              206,
              188,
              206,
              181,
              44,
              32,
              227,
              130,
              179,
              227,
              131,
              179,
              227,
              131,
              139,
              227,
              131,
              129,
              227,
              131,
              143,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              66,
              111,
              120,
              32,
              100,
              114,
              97,
              119,
              105,
              110,
              103,
              32,
              97,
              108,
              105,
              103,
              110,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              115,
              116,
              115,
              58,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              137,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              166,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              151,
              32,
              32,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              144,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              226,
              148,
              143,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              179,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              147,
              32,
              32,
              226,
              148,
              142,
              226,
              148,
              146,
              226,
              148,
              143,
              226,
              148,
              145,
              32,
              32,
              32,
              226,
              149,
              183,
              32,
              32,
              226,
              149,
              187,
              32,
              226,
              148,
              143,
              226,
              148,
              175,
              226,
              148,
              147,
              32,
              226,
              148,
              140,
              226,
              148,
              176,
              226,
              148,
              144,
              32,
              32,
              32,
              32,
              226,
              150,
              138,
              32,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              149,
              168,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              167,
              226,
              149,
              144,
              226,
              149,
              151,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              146,
              226,
              149,
              144,
              226,
              149,
              170,
              226,
              149,
              144,
              226,
              149,
              149,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              147,
              226,
              148,
              128,
              226,
              149,
              129,
              226,
              148,
              128,
              226,
              149,
              150,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              148,
              131,
              32,
              32,
              226,
              148,
              151,
              226,
              149,
              131,
              226,
              149,
              132,
              226,
              148,
              153,
              32,
              32,
              226,
              149,
              182,
              226,
              148,
              188,
              226,
              149,
              180,
              226,
              149,
              186,
              226,
              149,
              139,
              226,
              149,
              184,
              226,
              148,
              160,
              226,
              148,
              188,
              226,
              148,
              168,
              32,
              226,
              148,
              157,
              226,
              149,
              139,
              226,
              148,
              165,
              32,
              32,
              32,
              32,
              226,
              150,
              139,
              32,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              226,
              149,
              178,
              32,
              226,
              149,
              177,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              226,
              148,
              131,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              130,
              32,
              226,
              149,
              191,
              32,
              226,
              148,
              130,
              226,
              148,
              131,
              32,
              32,
              226,
              148,
              141,
              226,
              149,
              133,
              226,
              149,
              134,
              226,
              148,
              147,
              32,
              32,
              32,
              226,
              149,
              181,
              32,
              32,
              226,
              149,
              185,
              32,
              226,
              148,
              151,
              226,
              148,
              183,
              226,
              148,
              155,
              32,
              226,
              148,
              148,
              226,
              148,
              184,
              226,
              148,
              152,
              32,
              32,
              32,
              32,
              226,
              150,
              140,
              32,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              160,
              226,
              149,
              161,
              32,
              226,
              149,
              179,
              32,
              226,
              149,
              158,
              226,
              149,
              163,
              32,
              32,
              226,
              148,
              156,
              226,
              149,
              162,
              32,
              32,
              32,
              226,
              149,
              159,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              156,
              226,
              148,
              188,
              226,
              148,
              128,
              226,
              148,
              188,
              226,
              148,
              128,
              226,
              148,
              188,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              156,
              226,
              149,
              171,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              149,
              171,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              163,
              226,
              148,
              191,
              226,
              149,
              190,
              226,
              148,
              188,
              226,
              149,
              188,
              226,
              148,
              191,
              226,
              148,
              171,
              32,
              32,
              226,
              148,
              149,
              226,
              148,
              155,
              226,
              148,
              150,
              226,
              148,
              154,
              32,
              32,
              32,
              32,
              32,
              226,
              148,
              140,
              226,
              148,
              132,
              226,
              148,
              132,
              226,
              148,
              144,
              32,
              226,
              149,
              142,
              32,
              226,
              148,
              143,
              226,
              148,
              133,
              226,
              148,
              133,
              226,
              148,
              147,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              141,
              32,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              226,
              149,
              177,
              32,
              226,
              149,
              178,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              226,
              148,
              131,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              130,
              32,
              226,
              149,
              189,
              32,
              226,
              148,
              130,
              226,
              148,
              131,
              32,
              32,
              226,
              150,
              145,
              226,
              150,
              145,
              226,
              150,
              146,
              226,
              150,
              146,
              226,
              150,
              147,
              226,
              150,
              147,
              226,
              150,
              136,
              226,
              150,
              136,
              32,
              226,
              148,
              138,
              32,
              32,
              226,
              148,
              134,
              32,
              226,
              149,
              142,
              32,
              226,
              149,
              143,
              32,
              32,
              226,
              148,
              135,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              149,
              165,
              226,
              148,
              128,
              226,
              148,
              152,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              164,
              226,
              149,
              144,
              226,
              149,
              157,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              152,
              226,
              149,
              144,
              226,
              149,
              170,
              226,
              149,
              144,
              226,
              149,
              155,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              153,
              226,
              148,
              128,
              226,
              149,
              128,
              226,
              148,
              128,
              226,
              149,
              156,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              148,
              152,
              226,
              148,
              131,
              32,
              32,
              226,
              150,
              145,
              226,
              150,
              145,
              226,
              150,
              146,
              226,
              150,
              146,
              226,
              150,
              147,
              226,
              150,
              147,
              226,
              150,
              136,
              226,
              150,
              136,
              32,
              226,
              148,
              138,
              32,
              32,
              226,
              148,
              134,
              32,
              226,
              149,
              142,
              32,
              226,
              149,
              143,
              32,
              32,
              226,
              148,
              135,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              143,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              169,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              157,
              32,
              32,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              152,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              226,
              148,
              151,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              187,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              155,
              32,
              32,
              226,
              150,
              151,
              226,
              150,
              132,
              226,
              150,
              150,
              226,
              150,
              155,
              226,
              150,
              128,
              226,
              150,
              156,
              32,
              32,
              32,
              226,
              148,
              148,
              226,
              149,
              140,
              226,
              149,
              140,
              226,
              148,
              152,
              32,
              226,
              149,
              142,
              32,
              226,
              148,
              151,
              226,
              149,
              141,
              226,
              149,
              141,
              226,
              148,
              155,
              32,
              226,
              148,
              139,
              32,
              32,
              226,
              150,
              129,
              226,
              150,
              130,
              226,
              150,
              131,
              226,
              150,
              132,
              226,
              150,
              133,
              226,
              150,
              134,
              226,
              150,
              135,
              226,
              150,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              157,
              226,
              150,
              128,
              226,
              150,
              152,
              226,
              150,
              153,
              226,
              150,
              132,
              226,
              150,
              159,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32
            ]
          },
          "cookie": [],
          "responseTime": 81,
          "responseSize": 15630
        },
        "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has charset in content-type header"
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "Invalid Chai property: _postman_propertyIsList",
              "checksum": "cededb2b7e09ddc1966754c80c85e582",
              "id": "8184c3c4-d01a-4a6f-9992-358b142bda76",
              "timestamp": 1540933453747,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "359be1db-a4f0-4c13-8281-a4e7b4defdbb",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0
        },
        "item": {
          "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
          "name": "GZip Compressed Response",
          "request": {
            "url": "https://postman-echo.com/gzip",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('gzipped', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'gzip')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*gzip.*/);",
                  "});"
                ],
                "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/gzip",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AvnVKIiJd1fyxT-0NYr6XEnzExMWPuGv2.tnQxdZODxL4mFgavIdijs3bdi2eXdJTyBGd%2F8xhx%2FPM"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "ae878cce-9b1b-498b-acb2-fa17d64e5176",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:15 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"119-GfDHeE0iZC28JWLXnIeljQ2rYec\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "281"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              103,
              122,
              105,
              112,
              112,
              101,
              100,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              118,
              110,
              86,
              75,
              73,
              105,
              74,
              100,
              49,
              102,
              121,
              120,
              84,
              45,
              48,
              78,
              89,
              114,
              54,
              88,
              69,
              110,
              122,
              69,
              120,
              77,
              87,
              80,
              117,
              71,
              118,
              50,
              46,
              116,
              110,
              81,
              120,
              100,
              90,
              79,
              68,
              120,
              76,
              52,
              109,
              70,
              103,
              97,
              118,
              73,
              100,
              105,
              106,
              115,
              51,
              98,
              100,
              105,
              50,
              101,
              88,
              100,
              74,
              84,
              121,
              66,
              71,
              100,
              37,
              50,
              70,
              56,
              120,
              104,
              120,
              37,
              50,
              70,
              80,
              77,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              32,
              34,
              71,
              69,
              84,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 79,
          "responseSize": 371
        },
        "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has valid json body"
          },
          {
            "assertion": "response headers should indicate valid content encoding",
            "error": {
              "name": "AssertionError",
              "index": 2,
              "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
              "stack": "AssertionFailure: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:20)"
            }
          },
          {
            "assertion": "requesting http client should accept compressed response"
          }
        ]
      },
      {
        "cursor": {
          "ref": "0db4705f-9ee7-47a4-a851-15fb3912ba2c",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0
        },
        "item": {
          "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
          "name": "Deflate Compressed Response",
          "request": {
            "url": "https://postman-echo.com/deflate",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('deflated', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'deflate')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*deflate.*/);",
                  "});"
                ],
                "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/deflate",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AvnVKIiJd1fyxT-0NYr6XEnzExMWPuGv2.tnQxdZODxL4mFgavIdijs3bdi2eXdJTyBGd%2F8xhx%2FPM"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "ebeed6f8-a90e-47ce-ba9c-61bd1c4d28f5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "deflate"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"10d-MzwwsjKdIU6ceRxJ+SVWSEbDalM\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Atn6TRNtDuDvrgOZPFBskdNMESdjCHnwl.%2FXGgkU3EM2Z%2FThV2WFkdiPnjGQORbTlP6C6KRVqQvpo; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "269"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              118,
              110,
              86,
              75,
              73,
              105,
              74,
              100,
              49,
              102,
              121,
              120,
              84,
              45,
              48,
              78,
              89,
              114,
              54,
              88,
              69,
              110,
              122,
              69,
              120,
              77,
              87,
              80,
              117,
              71,
              118,
              50,
              46,
              116,
              110,
              81,
              120,
              100,
              90,
              79,
              68,
              120,
              76,
              52,
              109,
              70,
              103,
              97,
              118,
              73,
              100,
              105,
              106,
              115,
              51,
              98,
              100,
              105,
              50,
              101,
              88,
              100,
              74,
              84,
              121,
              66,
              71,
              100,
              37,
              50,
              70,
              56,
              120,
              104,
              120,
              37,
              50,
              70,
              80,
              77,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              54,
              46,
              50,
              46,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              32,
              34,
              71,
              69,
              84,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 84,
          "responseSize": 372
        },
        "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has valid json body"
          },
          {
            "assertion": "response headers should indicate valid content encoding",
            "error": {
              "name": "AssertionError",
              "index": 2,
              "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
              "stack": "AssertionFailure: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:21)"
            }
          },
          {
            "assertion": "requesting http client should accept compressed response"
          }
        ]
      },
      {
        "cursor": {
          "ref": "d850f7d3-156f-4f41-a1ee-39d4dbdfc379",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0
        },
        "item": {
          "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
          "name": "IP address in JSON format",
          "request": {
            "url": "https://postman-echo.com/ip",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('ip');",
                  "});",
                  "",
                  "pm.test(\"response must return a valid ip address\", function () {",
                  "    pm.expect(pm.response.json().ip).to",
                  "        // a really gnarly regular expression to ensure that ip address is in correct format",
                  "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                  "});"
                ],
                "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/ip",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Atn6TRNtDuDvrgOZPFBskdNMESdjCHnwl.%2FXGgkU3EM2Z%2FThV2WFkdiPnjGQORbTlP6C6KRVqQvpo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "d189db93-f790-4fb5-b2ba-8ab940b4cde8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"17-ZTm1Be8f4ih4jcC9xNQ9cl+kDBI\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "43"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              49,
              48,
              52,
              46,
              53,
              54,
              46,
              49,
              49,
              50,
              46,
              50,
              51,
              54,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 77,
          "responseSize": 23
        },
        "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response has valid json body"
          },
          {
            "assertion": "response must return a valid ip address"
          }
        ]
      },
      {
        "cursor": {
          "ref": "ceabd584-57aa-42ac-ad6d-2ed76223c490",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0
        },
        "item": {
          "id": "bcef4c98-835c-4372-aa1e-894a8ef1a0e8",
          "name": "Current UTC time",
          "request": {
            "url": "https://postman-echo.com/time/now",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "html"
              },
              "id": "cf201946-8167-4bac-b9f5-cbca1c847e3b",
              "name": "time as text",
              "originalRequest": {
                "url": "https://postman-echo.com/time/now",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "49"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "text/html; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:12 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly"
                }
              ],
              "body": "Wed, 11 Jan 2017 10:27:12 GMT",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response time matches server response 'date' header\", function () {",
                  "    pm.expect(pm.response.text()).to.eql(pm.response.headers.get('date'))",
                  "});"
                ],
                "_lastExecutionId": "3bccb2aa-f4c4-4a23-94ae-ad5906069720"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/now",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3Atn6TRNtDuDvrgOZPFBskdNMESdjCHnwl.%2FXGgkU3EM2Z%2FThV2WFkdiPnjGQORbTlP6C6KRVqQvpo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "a1265c8e-0fec-451c-8740-1f6d9d30ec6c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-muQ0R/6H+Iv9JZFKRv2LclYPltg\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3APek0mzjvaMmUAgKOV3CS6SxmIFoaYF9B.pY3GFqdHnzjTAXxRnFCehj%2FRVtBJzmlYK8OBC3Wp4dg; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "49"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              84,
              117,
              101,
              44,
              32,
              51,
              48,
              32,
              79,
              99,
              116,
              32,
              50,
              48,
              49,
              56,
              32,
              50,
              49,
              58,
              48,
              52,
              58,
              49,
              54,
              32,
              71,
              77,
              84
            ]
          },
          "cookie": [],
          "responseTime": 195,
          "responseSize": 29
        },
        "id": "bcef4c98-835c-4372-aa1e-894a8ef1a0e8",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response time matches server response 'date' header"
          }
        ]
      },
      {
        "cursor": {
          "ref": "036759f2-1fa2-4b97-9091-6e39a6276e8c",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0
        },
        "item": {
          "id": "9cf46805-b88d-4b62-98b2-c67c488d370d",
          "name": "Timestamp validity",
          "request": {
            "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "43b89090-8e91-49ae-a285-5cdda604732b",
              "name": "Valid Timestamp",
              "originalRequest": {
                "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "14"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:33 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly"
                }
              ],
              "body": "{\"valid\":true}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI"
                }
              ]
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ab59bf97-69af-40f1-9e00-8b347c00db38",
              "name": "Invalid Timestamp",
              "originalRequest": {
                "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "15"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:53 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly"
                }
              ],
              "body": "{\"valid\":false}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query time is valid\", function () {",
                  "    pm.response.to.have.jsonBody('valid', true);",
                  "});"
                ],
                "_lastExecutionId": "63f56be6-8a4c-46c6-8d66-cadaca510b60"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/valid?timestamp=2016-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3APek0mzjvaMmUAgKOV3CS6SxmIFoaYF9B.pY3GFqdHnzjTAXxRnFCehj%2FRVtBJzmlYK8OBC3Wp4dg"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "382326ef-e34d-483d-97e2-a7c6aa6f9843",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"e-3MDSGou3nIOvlBZElUyTiBbaRZY\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ATVHaZn4rLaCMGHWshTHfo-xpzGYGKx42.rRlMk6BEKZQHicaO79rb8L0PcJKLxbwdcpTjAKQIbFE; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 14
        },
        "id": "9cf46805-b88d-4b62-98b2-c67c488d370d",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say whether request query time is valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "767ff2a9-e814-4a33-85be-6ff7607bf203",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0
        },
        "item": {
          "id": "5702e768-9584-422e-b86d-a1b67fbaa37f",
          "name": "Format timestamp",
          "request": {
            "url": "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query time is valid\", function () {",
                  "    pm.response.to.have.jsonBody('format', '20');",
                  "});"
                ],
                "_lastExecutionId": "e4b86067-43a2-4bed-9ef5-31c59687c628"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ATVHaZn4rLaCMGHWshTHfo-xpzGYGKx42.rRlMk6BEKZQHicaO79rb8L0PcJKLxbwdcpTjAKQIbFE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "721e4bfa-02b6-44e6-9685-06a84fe14145",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"f-oSXEKZdRgFcBy3nxz+EFgc2p5wo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 15
        },
        "id": "5702e768-9584-422e-b86d-a1b67fbaa37f",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say whether request query time is valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "bb8386b5-1094-40aa-83be-7db8e3c3c56c",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0
        },
        "item": {
          "id": "aceb1d26-d55d-4bb9-ae69-cf2332fc76ec",
          "name": "Extract timestamp unit",
          "request": {
            "url": "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query unit is valid\", function () {",
                  "    pm.response.to.have.jsonBody('unit', 1);",
                  "});"
                ],
                "_lastExecutionId": "618f02bb-d0d7-4368-a253-ff960255accf"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ATVHaZn4rLaCMGHWshTHfo-xpzGYGKx42.rRlMk6BEKZQHicaO79rb8L0PcJKLxbwdcpTjAKQIbFE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "2931432d-f364-4bdd-b5b8-e8b4ffae2c81",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"a-Tq86/bt7ViOhfxXgqKCTL6sompk\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "10"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              110,
              105,
              116,
              34,
              58,
              49,
              125
            ]
          },
          "cookie": [],
          "responseTime": 81,
          "responseSize": 10
        },
        "id": "aceb1d26-d55d-4bb9-ae69-cf2332fc76ec",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say whether request query unit is valid"
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a651544-4b51-4589-96da-18e39a54eedb",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0
        },
        "item": {
          "id": "9431cea0-a5b2-4cf9-a235-99baf60e83b2",
          "name": "Time addition",
          "request": {
            "url": "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the added years\", function () {",
                  "    pm.response.to.have.jsonBody('sum', 'Sat Oct 10 2116 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "6cc15a84-325e-4ec5-b249-dbad56eecb5d"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ATVHaZn4rLaCMGHWshTHfo-xpzGYGKx42.rRlMk6BEKZQHicaO79rb8L0PcJKLxbwdcpTjAKQIbFE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "18826be9-39a2-4d7c-a069-d9b4c6a64d4f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"2b-NI+s6dhyoOC4+MmZW5sCBgzsnMw\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "58"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              109,
              34,
              58,
              34,
              83,
              97,
              116,
              32,
              79,
              99,
              116,
              32,
              49,
              48,
              32,
              50,
              49,
              49,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 125,
          "responseSize": 43
        },
        "id": "9431cea0-a5b2-4cf9-a235-99baf60e83b2",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should return the added years"
          }
        ]
      },
      {
        "cursor": {
          "ref": "5218052f-bcd2-44bd-9cd0-2a9c5d56099f",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0
        },
        "item": {
          "id": "49c3e6aa-9cef-40a7-a203-e331da632f39",
          "name": "Time subtraction",
          "request": {
            "url": "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=50",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the subtracted years\", function () {",
                  "    pm.response.to.have.jsonBody('difference', 'Mon Oct 10 1966 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "cd27c89d-7061-41a3-a254-a383a6b6de05"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=50",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ATVHaZn4rLaCMGHWshTHfo-xpzGYGKx42.rRlMk6BEKZQHicaO79rb8L0PcJKLxbwdcpTjAKQIbFE"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "4984c45b-f0a8-4b4a-a3b1-771df53dc58b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:16 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"32-PND5PkDaCj18RICDpWcSi9vkakY\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ASc8qVBPsgruRTMNPYHsLppHs8C4kaH3r.jiBW%2F%2BbHQx2fWw19UWHCnwxJgxOEn2hSi2eUyZW%2F%2Fbo; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "65"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              34,
              58,
              34,
              77,
              111,
              110,
              32,
              79,
              99,
              116,
              32,
              49,
              48,
              32,
              49,
              57,
              54,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 81,
          "responseSize": 50
        },
        "id": "49c3e6aa-9cef-40a7-a203-e331da632f39",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should return the subtracted years"
          }
        ]
      },
      {
        "cursor": {
          "ref": "826654ca-bb49-49ba-9ccb-97b4e4df9fb4",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0
        },
        "item": {
          "id": "b24df3a3-61c1-4d68-b6f3-d3c328ec13ad",
          "name": "Start of time",
          "request": {
            "url": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the beginning of month\", function () {",
                  "    pm.response.to.have.jsonBody('start', 'Sat Oct 01 2016 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "d96ac3bf-a5c8-48dc-b536-1c0288afbed7"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3ASc8qVBPsgruRTMNPYHsLppHs8C4kaH3r.jiBW%2F%2BbHQx2fWw19UWHCnwxJgxOEn2hSi2eUyZW%2F%2Fbo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "ce6640b3-e36a-4f5b-b9ed-c92fd031dbfd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"2d-+DRNEGBPVvAa16PUC5AjHCOmq/0\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AAWNjaw-YFob5R8eq0jvmVJ1GrFzWv10T.ZZksbodZDF6fL%2BWcb9i%2B0qVfMnKi4ilaZdNV%2Bp1CRM4; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              34,
              83,
              97,
              116,
              32,
              79,
              99,
              116,
              32,
              48,
              49,
              32,
              50,
              48,
              49,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 94,
          "responseSize": 45
        },
        "id": "b24df3a3-61c1-4d68-b6f3-d3c328ec13ad",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should return the beginning of month"
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b79e02e-ec0f-467c-805f-d430097576dc",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0
        },
        "item": {
          "id": "ff1a3deb-bd71-41f5-9e4f-7d19896d4118",
          "name": "Object representation",
          "request": {
            "url": "https://postman-echo.com/time/object?timestamp=2016-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the date components\", function () {",
                  "    pm.expect(pm.response.json()).to.eql({",
                  "        \"years\": 2016,",
                  "        \"months\": 9,",
                  "        \"date\": 10,",
                  "        ",
                  "        \"hours\": 0,",
                  "        \"minutes\": 0,",
                  "        \"seconds\": 0,",
                  "        \"milliseconds\": 0",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "a38e4ca7-5773-4158-8dd9-91d17e899029"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/object?timestamp=2016-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AAWNjaw-YFob5R8eq0jvmVJ1GrFzWv10T.ZZksbodZDF6fL%2BWcb9i%2B0qVfMnKi4ilaZdNV%2Bp1CRM4"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "a78f5c78-c301-4b58-98be-4b93cd0ea2fa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"56-sbJq4ZMpg65IM+Xxb5GSE9GGvQc\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AScmFJ3jy2kx9RRLEgi4-7WGUPkXtKU4U.gwDo0MjLTdy9ijcCeHdS%2FZYUoU20c%2FFL0BJKRI8mHN8; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "83"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              121,
              101,
              97,
              114,
              115,
              34,
              58,
              50,
              48,
              49,
              54,
              44,
              34,
              109,
              111,
              110,
              116,
              104,
              115,
              34,
              58,
              57,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              104,
              111,
              117,
              114,
              115,
              34,
              58,
              48,
              44,
              34,
              109,
              105,
              110,
              117,
              116,
              101,
              115,
              34,
              58,
              48,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              115,
              34,
              58,
              48,
              44,
              34,
              109,
              105,
              108,
              108,
              105,
              115,
              101,
              99,
              111,
              110,
              100,
              115,
              34,
              58,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 87,
          "responseSize": 86
        },
        "id": "ff1a3deb-bd71-41f5-9e4f-7d19896d4118",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should return the date components"
          }
        ]
      },
      {
        "cursor": {
          "ref": "46be0e16-74aa-455c-9020-cacef7693a95",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0
        },
        "item": {
          "id": "6b4a2c74-0f82-475c-815f-ba2aee9cba7c",
          "name": "Before comparisons",
          "request": {
            "url": "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is before target\", function () {",
                  "    pm.response.to.have.jsonBody('before', true);",
                  "});"
                ],
                "_lastExecutionId": "3370e920-9ef2-4bc3-8b4c-cf8443296ef0"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AScmFJ3jy2kx9RRLEgi4-7WGUPkXtKU4U.gwDo0MjLTdy9ijcCeHdS%2FZYUoU20c%2FFL0BJKRI8mHN8"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "1b286256-073a-4750-8987-46c1f7be0fbb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"f-pYji1tDlxSR6vlOQLH4azAZGkpo\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              101,
              102,
              111,
              114,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 15
        },
        "id": "6b4a2c74-0f82-475c-815f-ba2aee9cba7c",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say timestamp is before target"
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd8879aa-2549-4bd0-87f1-bc320a61eee0",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0
        },
        "item": {
          "id": "1856107f-5727-4581-af7c-163e61ff8dce",
          "name": "After comparisons",
          "request": {
            "url": "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is not after target\", function () {",
                  "    pm.response.to.have.jsonBody('after', false);",
                  "});"
                ],
                "_lastExecutionId": "615788c8-accd-4e64-bba8-036166809b5c"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AScmFJ3jy2kx9RRLEgi4-7WGUPkXtKU4U.gwDo0MjLTdy9ijcCeHdS%2FZYUoU20c%2FFL0BJKRI8mHN8"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "bbeb6010-d915-41c2-87f7-5785b9df1904",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"f-1yo7D9f7qelpng2aZyy3Vk9UAA8\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AWckAjkQOb0DNFsAJDGJgvNrERm0wj6hf.IOEahgQW25E7YYF5Zhyeaoe5PuLaqj8w2wgf98mxFh0; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              102,
              116,
              101,
              114,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 79,
          "responseSize": 15
        },
        "id": "1856107f-5727-4581-af7c-163e61ff8dce",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say timestamp is not after target"
          }
        ]
      },
      {
        "cursor": {
          "ref": "de7455ed-f88f-4d0f-a103-0135ac6da0ab",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0
        },
        "item": {
          "id": "eb623d24-95a2-48b8-95bf-0d499e115ad1",
          "name": "Between timestamps",
          "request": {
            "url": "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is not between start and end\", function () {",
                  "    pm.response.to.have.jsonBody('between', false);",
                  "});"
                ],
                "_lastExecutionId": "e93f673d-0cec-42f7-894d-d416053a8c98"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AWckAjkQOb0DNFsAJDGJgvNrERm0wj6hf.IOEahgQW25E7YYF5Zhyeaoe5PuLaqj8w2wgf98mxFh0"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "b764e4a5-d8e6-4ac5-882e-46fc4ef923f2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"11-Q5jSDN8J9UWiS3bMKjaPflikNDU\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AMfN7K6NVoQ7mMVKVfGYbPcPxCy4uq3ll.RLjGN7qaWxL63f5etmd2rZz7TA5FXKuwVlTPlkRiuh4; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "17"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 17
        },
        "id": "eb623d24-95a2-48b8-95bf-0d499e115ad1",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say timestamp is not between start and end"
          }
        ]
      },
      {
        "cursor": {
          "ref": "e552a293-1d44-453a-ac66-9a2b84730ef4",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0
        },
        "item": {
          "id": "61f443a0-0b04-410a-815c-417e99e8421f",
          "name": "Leap year check",
          "request": {
            "url": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is within leap year\", function () {",
                  "    pm.response.to.have.jsonBody('leap', true);",
                  "});"
                ],
                "_lastExecutionId": "79380a98-b071-4fb3-8400-6be877f4ce90"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/time/leap?timestamp=2016-10-10",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AMfN7K6NVoQ7mMVKVfGYbPcPxCy4uq3ll.RLjGN7qaWxL63f5etmd2rZz7TA5FXKuwVlTPlkRiuh4"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "description": {
            "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "029a448a-cfd7-4e5e-b7be-9bebcdd0d1c2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "ETag",
              "value": "W/\"d-/cHbrs54NBQWs+BmYLn36yaGw/0\""
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3APcrgDfKzYT9KAQeoqS9NfTJJLKiZsXKL.oZMGPMVYtTuVTxHX4%2FXi46aLCwvjOR1X1SV%2FtKlmf%2Fo; Path=/; HttpOnly"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              108,
              101,
              97,
              112,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 13
        },
        "id": "61f443a0-0b04-410a-815c-417e99e8421f",
        "assertions": [
          {
            "assertion": "response is ok"
          },
          {
            "assertion": "response json should say timestamp is within leap year"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1b8d215-ee9b-42fd-af47-9999d52b2fee",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0
        },
        "item": {
          "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=1&to=2",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/transform/collection?from=1&to=2",
          "method": "POST",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3APcrgDfKzYT9KAQeoqS9NfTJJLKiZsXKL.oZMGPMVYtTuVTxHX4%2FXi46aLCwvjOR1X1SV%2FtKlmf%2Fo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 1188
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
          },
          "description": {
            "type": "text/plain"
          }
        },
        "response": {
          "id": "6475c26b-b148-44f5-8d43-2a5dfd32ac7e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 0
        },
        "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
        "assertions": [
          {
            "assertion": "response is ok",
            "error": {
              "name": "AssertionError",
              "index": 0,
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionFailure: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response has almost valid items",
            "error": {
              "name": "AssertionError",
              "index": 1,
              "message": "expected undefined in response to contain property 'info.schema'",
              "stack": "AssertionFailure: expected undefined in response to contain property 'info.schema'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc506bdf-5f82-4955-b575-b117d81f84e0",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0
        },
        "item": {
          "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=2&to=1",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/transform/collection?from=2&to=1",
          "method": "POST",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3APcrgDfKzYT9KAQeoqS9NfTJJLKiZsXKL.oZMGPMVYtTuVTxHX4%2FXi46aLCwvjOR1X1SV%2FtKlmf%2Fo"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            },
            {
              "key": "content-length",
              "value": 789
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
          },
          "description": {
            "type": "text/plain"
          }
        },
        "response": {
          "id": "ff9a0b2f-9dbe-4a74-a1d3-040bde2385aa",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AT5YCx6UItupgK6ETSTCX_Zc8G1LMp7yD.pCV45K%2Boma2EIuFMAzk6uDvPsGX%2BLRMQW7sLIpcv82M; Path=/; HttpOnly"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 82,
          "responseSize": 0
        },
        "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
        "assertions": [
          {
            "assertion": "response is ok",
            "error": {
              "name": "AssertionError",
              "index": 0,
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionFailure: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response has almost valid items",
            "error": {
              "name": "AssertionError",
              "index": 1,
              "message": "expected undefined in response to contain property 'folders'",
              "stack": "AssertionFailure: expected undefined in response to contain property 'folders'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d554da46-7e11-4066-8b10-262e1c123367",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0
        },
        "item": {
          "id": "274e2aeb-7eaf-4a16-b001-20402e8f8bb8",
          "name": "DigestAuth Request",
          "request": {
            "url": "https://postman-echo.com/digest-auth",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "code",
                  "value": "xWnkliVQJURqB2x1",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "authorization_code",
                  "type": "text"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://www.getpostman.com/oauth2/callback",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "abc123",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "ssh-secret",
                  "type": "text"
                }
              ]
            },
            "description": {
              "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 401\"] = responseCode.code === 401;",
                  "tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
                  "",
                  "var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
                  "    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
                  "    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
                  "    realm = authenticateHeader.slice(realmStart,realmEnd),",
                  "    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
                  "    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
                  "    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
                  "    ",
                  "postman.setGlobalVariable('echo_digest_realm', realm);",
                  "postman.setGlobalVariable('echo_digest_nonce', nonce);"
                ],
                "_lastExecutionId": "130e226c-0d63-4cee-ad6d-22de4dcfbc1f"
              }
            }
          ]
        },
        "request": {
          "url": "https://postman-echo.com/digest-auth",
          "method": "GET",
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/6.2.5"
            },
            {
              "key": "Accept",
              "value": "*/*"
            },
            {
              "key": "Host",
              "value": "postman-echo.com"
            },
            {
              "key": "cookie",
              "value": "sails.sid=s%3AT5YCx6UItupgK6ETSTCX_Zc8G1LMp7yD.pCV45K%2Boma2EIuFMAzk6uDvPsGX%2BLRMQW7sLIpcv82M"
            },
            {
              "key": "accept-encoding",
              "value": "gzip, deflate"
            }
          ],
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "code",
                "value": "xWnkliVQJURqB2x1",
                "type": "text"
              },
              {
                "key": "grant_type",
                "value": "authorization_code",
                "type": "text"
              },
              {
                "key": "redirect_uri",
                "value": "https://www.getpostman.com/oauth2/callback",
                "type": "text"
              },
              {
                "key": "client_id",
                "value": "abc123",
                "type": "text"
              },
              {
                "key": "client_secret",
                "value": "ssh-secret",
                "type": "text"
              }
            ]
          },
          "description": {
            "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
            "type": "text/plain"
          }
        },
        "response": {
          "id": "6336ef40-0ceb-4023-b380-bc4605d0e402",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 30 Oct 2018 21:04:17 GMT"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Ak_ETtSHN4ppxgdAKhW8EZw6_5hCvBgHc.vifEpJ5Uhf76WowAmE8GOC8fmIl%2BQuykTXU914A4frU; Path=/; HttpOnly"
            },
            {
              "key": "WWW-Authenticate",
              "value": "Digest realm=\"Users\", nonce=\"oa7HhoCF02h15jKyv2NrVsjNcCM1OjJY\", qop=\"auth\""
            },
            {
              "key": "Content-Length",
              "value": "12"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 76,
          "responseSize": 12
        },
        "id": "274e2aeb-7eaf-4a16-b001-20402e8f8bb8",
        "assertions": [
          {
            "assertion": "response code is 401"
          },
          {
            "assertion": "response has WWW-Authenticate header"
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 11876
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "ba97d5b803a9d086631777c2f3b3a09c",
          "id": "bd769453-1a58-41af-b540-44db6e000b63",
          "timestamp": 1540933449994,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
          "name": "Basic Auth",
          "request": {
            "url": "https://postman-echo.com/basic-auth",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "basic",
              "basic": {}
            },
            "description": {
              "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
              "name": "200",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying 'authenticated'\", function () {",
                  "    pm.response.to.have.jsonBody('authenticated', true);",
                  "});"
                ],
                "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71cfd0e4-d394-472a-98c4-2b05f8b82871",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "execution": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "message": "expected undefined in response to contain property 'authenticated'",
          "stack": "AssertionFailure: expected undefined in response to contain property 'authenticated'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "5eb20626c4a6b47d39999cee032d67b8",
          "id": "40f7fcf5-ec45-418a-b86a-350562000161",
          "timestamp": 1540933449999,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
          "name": "Basic Auth",
          "request": {
            "url": "https://postman-echo.com/basic-auth",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "auth": {
              "type": "basic",
              "basic": {}
            },
            "description": {
              "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
              "name": "200",
              "originalRequest": {
                "url": "",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying 'authenticated'\", function () {",
                  "    pm.response.to.have.jsonBody('authenticated', true);",
                  "});"
                ],
                "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71cfd0e4-d394-472a-98c4-2b05f8b82871",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "execution": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "738055e345cb87a51272cb2c1199a5f0",
          "id": "9ea2bf9e-8740-42ed-af78-84ebe3b5b1ec",
          "timestamp": 1540933450482,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
          "name": "Hawk Auth",
          "request": {
            "url": "https://postman-echo.com/auth/hawk",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "access_token",
                  "value": "xyz1",
                  "type": "text"
                },
                {
                  "key": "id",
                  "value": "U1",
                  "type": "text"
                },
                {
                  "key": "server_secret",
                  "value": "zeppelin",
                  "type": "text"
                },
                {
                  "key": "admin",
                  "value": "true",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "hawk",
              "hawk": {}
            },
            "description": {
              "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
              "name": "Success",
              "originalRequest": {
                "url": "https://echo.getpostman.com/auth/hawk",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Server-Authorization",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server-Authorization",
                  "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2136899-c2f3-421b-baff-e38d63e47a55",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "execution": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "message": "expected { Object (statusCode, error) } in response to contain property 'status'",
          "stack": "AssertionFailure: expected { Object (statusCode, error) } in response to contain property 'status'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "4d6fea8adcea48c39d86899f8b72d27b",
          "id": "6deeb4b7-8d33-44fe-9026-92f301db619a",
          "timestamp": 1540933450484,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
          "name": "Hawk Auth",
          "request": {
            "url": "https://postman-echo.com/auth/hawk",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "access_token",
                  "value": "xyz1",
                  "type": "text"
                },
                {
                  "key": "id",
                  "value": "U1",
                  "type": "text"
                },
                {
                  "key": "server_secret",
                  "value": "zeppelin",
                  "type": "text"
                },
                {
                  "key": "admin",
                  "value": "true",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "hawk",
              "hawk": {}
            },
            "description": {
              "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
              "name": "Success",
              "originalRequest": {
                "url": "https://echo.getpostman.com/auth/hawk",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Server-Authorization",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server-Authorization",
                  "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2136899-c2f3-421b-baff-e38d63e47a55",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "execution": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionFailure: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1c9aedbd71c5559c175c7283b06fd058",
          "id": "7b9ca5d5-e0bd-445e-876a-9815deba61c0",
          "timestamp": 1540933450597,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
          "name": "OAuth1.0 (verify signature)",
          "request": {
            "url": "https://postman-echo.com/oauth1",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "code",
                  "value": "xWnkliVQJURqB2x1",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "authorization_code",
                  "type": "text"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://www.getpostman.com/oauth2/callback",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "abc123",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "ssh-secret",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "oauth1",
              "oauth1": {}
            },
            "description": {
              "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
              "name": "401",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "536"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
              "name": "200",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "95"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0dbd2e8c-58b8-486f-87cb-d624cae445f7",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "execution": "90aab9b2-a805-4e7b-aa65-b3e075270375"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "message": "expected response body json at \"status\" to contain 'pass' but got 'fail'",
          "stack": "AssertionFailure: expected response body json at \"status\" to contain 'pass' but got 'fail'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "d6d68a826d0ae3c55a64379e7b05d529",
          "id": "b138be9d-d747-4114-820a-e54d8c60504d",
          "timestamp": 1540933450598,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
          "name": "OAuth1.0 (verify signature)",
          "request": {
            "url": "https://postman-echo.com/oauth1",
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "code",
                  "value": "xWnkliVQJURqB2x1",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "authorization_code",
                  "type": "text"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://www.getpostman.com/oauth2/callback",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "abc123",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "ssh-secret",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "oauth1",
              "oauth1": {}
            },
            "description": {
              "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
              "type": "text/plain"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
              "name": "401",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "536"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
              "name": "200",
              "originalRequest": {
                "url": "https://echo.getpostman.com/oauth1",
                "method": "GET",
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "95"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
              }
            }
          ]
        },
        "parent": {
          "id": "1b17d48f-7848-45aa-a246-64ac08452e35",
          "name": "Authentication Methods",
          "item": [
            {
              "id": "b0155270-5bd0-4d08-bae6-7d9a2fb8a26b",
              "name": "Basic Auth",
              "request": {
                "url": "https://postman-echo.com/basic-auth",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "basic",
                  "basic": {}
                },
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e6fd691f-e3ed-4bcf-93ec-3d4c7e5abfdc",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "7bdf7029-9fe4-4031-bb84-c7d147d89bf5"
                  }
                }
              ]
            },
            {
              "id": "8b253091-6489-4c51-92c0-cac7450c20b6",
              "name": "DigestAuth Success",
              "request": {
                "url": "https://postman-echo.com/digest-auth",
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "auth": {
                  "type": "digest",
                  "digest": {}
                },
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c4339217-9461-428d-a561-9af22ea6e9a2",
                  "name": "200",
                  "originalRequest": {
                    "url": "",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "b07f0041-f54e-4a4a-b2c4-e1263d555163"
                  }
                }
              ]
            },
            {
              "id": "3930b795-8d73-4cac-9ce4-cc3ce2d5a2a6",
              "name": "Hawk Auth",
              "request": {
                "url": "https://postman-echo.com/auth/hawk",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "access_token",
                      "value": "xyz1",
                      "type": "text"
                    },
                    {
                      "key": "id",
                      "value": "U1",
                      "type": "text"
                    },
                    {
                      "key": "server_secret",
                      "value": "zeppelin",
                      "type": "text"
                    },
                    {
                      "key": "admin",
                      "value": "true",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "hawk",
                  "hawk": {}
                },
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "fc925f0c-9594-4cf8-8bcf-905309fbcb25",
                  "name": "Success",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/auth/hawk",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "access_token",
                          "value": "xyz1",
                          "type": "text"
                        },
                        {
                          "key": "id",
                          "value": "U1",
                          "type": "text"
                        },
                        {
                          "key": "server_secret",
                          "value": "zeppelin",
                          "type": "text"
                        },
                        {
                          "key": "admin",
                          "value": "true",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "fb2e01ac-0a20-487a-803c-55ecc37fd49c"
                  }
                }
              ]
            },
            {
              "id": "f0e28f90-8547-4ebf-9363-96a9571d0ac4",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "url": "https://postman-echo.com/oauth1",
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "code",
                      "value": "xWnkliVQJURqB2x1",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "type": "text"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "https://www.getpostman.com/oauth2/callback",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "abc123",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "ssh-secret",
                      "type": "text"
                    }
                  ]
                },
                "auth": {
                  "type": "oauth1",
                  "oauth1": {}
                },
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "a7a4b352-e50f-42a7-bf3b-c8a27d5c50c8",
                  "name": "401",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "80b65111-2825-4b9e-b7a0-1c36354609bd",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/oauth1",
                    "method": "GET",
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "code",
                          "value": "xWnkliVQJURqB2x1",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "authorization_code",
                          "type": "text"
                        },
                        {
                          "key": "redirect_uri",
                          "value": "https://www.getpostman.com/oauth2/callback",
                          "type": "text"
                        },
                        {
                          "key": "client_id",
                          "value": "abc123",
                          "type": "text"
                        },
                        {
                          "key": "client_secret",
                          "value": "ssh-secret",
                          "type": "text"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "90aab9b2-a805-4e7b-aa65-b3e075270375"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0dbd2e8c-58b8-486f-87cb-d624cae445f7",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "execution": "90aab9b2-a805-4e7b-aa65-b3e075270375"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Invalid Chai property: _postman_propertyIsList",
          "checksum": "cededb2b7e09ddc1966754c80c85e582",
          "id": "e64536ed-1d7d-478b-bdcb-a406c81b0f56",
          "timestamp": 1540933451383,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
          "name": "Streamed Response",
          "request": {
            "url": "https://postman-echo.com/stream/5",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
              }
            }
          ]
        },
        "parent": {
          "id": "b1b7cb69-c9cc-4576-b902-62f1446542df",
          "name": "Utilities",
          "item": [
            {
              "id": "d24a8218-4491-4844-8f50-1acc171e1302",
              "name": "Response Status Code",
              "request": {
                "url": "https://postman-echo.com/status/200",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/status/200",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
                  }
                }
              ]
            },
            {
              "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
              "name": "Streamed Response",
              "request": {
                "url": "https://postman-echo.com/stream/5",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
                  }
                }
              ]
            },
            {
              "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
              "name": "Delay Response",
              "request": {
                "url": "https://postman-echo.com/delay/2",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
                  "name": "success-response",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/delay/3",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
                  }
                }
              ]
            },
            {
              "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "url": "https://postman-echo.com/encoding/utf8",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
                  }
                }
              ]
            },
            {
              "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
              "name": "GZip Compressed Response",
              "request": {
                "url": "https://postman-echo.com/gzip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
                  }
                }
              ]
            },
            {
              "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
              "name": "Deflate Compressed Response",
              "request": {
                "url": "https://postman-echo.com/deflate",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
                  }
                }
              ]
            },
            {
              "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
              "name": "IP address in JSON format",
              "request": {
                "url": "https://postman-echo.com/ip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f6c68f20-9b2e-490b-a702-b27cb7edabd2",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "Invalid Chai property: _postman_propertyIsList",
          "checksum": "cededb2b7e09ddc1966754c80c85e582",
          "id": "8184c3c4-d01a-4a6f-9992-358b142bda76",
          "timestamp": 1540933453747,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
          "name": "Get UTF8 Encoded Response",
          "request": {
            "url": "https://postman-echo.com/encoding/utf8",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has charset in content-type header\", function () {",
                  "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
              }
            }
          ]
        },
        "parent": {
          "id": "b1b7cb69-c9cc-4576-b902-62f1446542df",
          "name": "Utilities",
          "item": [
            {
              "id": "d24a8218-4491-4844-8f50-1acc171e1302",
              "name": "Response Status Code",
              "request": {
                "url": "https://postman-echo.com/status/200",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/status/200",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
                  }
                }
              ]
            },
            {
              "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
              "name": "Streamed Response",
              "request": {
                "url": "https://postman-echo.com/stream/5",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
                  }
                }
              ]
            },
            {
              "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
              "name": "Delay Response",
              "request": {
                "url": "https://postman-echo.com/delay/2",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
                  "name": "success-response",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/delay/3",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
                  }
                }
              ]
            },
            {
              "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "url": "https://postman-echo.com/encoding/utf8",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
                  }
                }
              ]
            },
            {
              "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
              "name": "GZip Compressed Response",
              "request": {
                "url": "https://postman-echo.com/gzip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
                  }
                }
              ]
            },
            {
              "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
              "name": "Deflate Compressed Response",
              "request": {
                "url": "https://postman-echo.com/deflate",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
                  }
                }
              ]
            },
            {
              "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
              "name": "IP address in JSON format",
              "request": {
                "url": "https://postman-echo.com/ip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4b04b8c1-a3ba-42b3-b212-12d2095da1c4",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
          "stack": "AssertionFailure: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:20)",
          "checksum": "f8dedcd37bdcfc8ae436027cd0a2f222",
          "id": "fdc01ee3-71e8-4a37-9566-0af62ca5f864",
          "timestamp": 1540933453848,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
          "name": "GZip Compressed Response",
          "request": {
            "url": "https://postman-echo.com/gzip",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('gzipped', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'gzip')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*gzip.*/);",
                  "});"
                ],
                "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
              }
            }
          ]
        },
        "parent": {
          "id": "b1b7cb69-c9cc-4576-b902-62f1446542df",
          "name": "Utilities",
          "item": [
            {
              "id": "d24a8218-4491-4844-8f50-1acc171e1302",
              "name": "Response Status Code",
              "request": {
                "url": "https://postman-echo.com/status/200",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/status/200",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
                  }
                }
              ]
            },
            {
              "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
              "name": "Streamed Response",
              "request": {
                "url": "https://postman-echo.com/stream/5",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
                  }
                }
              ]
            },
            {
              "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
              "name": "Delay Response",
              "request": {
                "url": "https://postman-echo.com/delay/2",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
                  "name": "success-response",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/delay/3",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
                  }
                }
              ]
            },
            {
              "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "url": "https://postman-echo.com/encoding/utf8",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
                  }
                }
              ]
            },
            {
              "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
              "name": "GZip Compressed Response",
              "request": {
                "url": "https://postman-echo.com/gzip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
                  }
                }
              ]
            },
            {
              "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
              "name": "Deflate Compressed Response",
              "request": {
                "url": "https://postman-echo.com/deflate",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
                  }
                }
              ]
            },
            {
              "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
              "name": "IP address in JSON format",
              "request": {
                "url": "https://postman-echo.com/ip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "359be1db-a4f0-4c13-8281-a4e7b4defdbb",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "execution": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
          "stack": "AssertionFailure: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:21)",
          "checksum": "c726da4547c0b4390b6b5e5ba9f75f00",
          "id": "55a43f8e-abef-4daf-ab45-e5f6aafe5045",
          "timestamp": 1540933453957,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
          "name": "Deflate Compressed Response",
          "request": {
            "url": "https://postman-echo.com/deflate",
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": {
              "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('deflated', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'deflate')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*deflate.*/);",
                  "});"
                ],
                "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
              }
            }
          ]
        },
        "parent": {
          "id": "b1b7cb69-c9cc-4576-b902-62f1446542df",
          "name": "Utilities",
          "item": [
            {
              "id": "d24a8218-4491-4844-8f50-1acc171e1302",
              "name": "Response Status Code",
              "request": {
                "url": "https://postman-echo.com/status/200",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "b7f8334b-bc83-4461-ab49-f881294bf70b",
                  "name": "200",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/status/200",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "cd86b3c9-0d00-4307-993a-a6deacbcc8e7"
                  }
                }
              ]
            },
            {
              "id": "482ebba1-57c8-4707-8be2-0c63d3d76890",
              "name": "Streamed Response",
              "request": {
                "url": "https://postman-echo.com/stream/5",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "4409f1f0-65ae-4eae-a5ff-bab29e9d0072"
                  }
                }
              ]
            },
            {
              "id": "28e25553-e5d3-4e0e-b19f-78d67c73e726",
              "name": "Delay Response",
              "request": {
                "url": "https://postman-echo.com/delay/2",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "a5755a3e-73a4-4af1-9f41-0489c0b77147",
                  "name": "success-response",
                  "originalRequest": {
                    "url": "https://echo.getpostman.com/delay/3",
                    "method": "GET",
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "c19bb492-e475-4503-a9ca-8da51be48061"
                  }
                }
              ]
            },
            {
              "id": "79b597d5-66be-49f6-a539-2e722db3d6e7",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "url": "https://postman-echo.com/encoding/utf8",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "8e986c1b-4446-44ac-b7b8-a355aace5abb"
                  }
                }
              ]
            },
            {
              "id": "265cd873-b85b-421f-b834-a6a6ee350b05",
              "name": "GZip Compressed Response",
              "request": {
                "url": "https://postman-echo.com/gzip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "9284bb87-5af6-4bc4-8e32-2cf96a32d547"
                  }
                }
              ]
            },
            {
              "id": "915e684a-b4e5-4acc-a64b-aea12bad5289",
              "name": "Deflate Compressed Response",
              "request": {
                "url": "https://postman-echo.com/deflate",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "966c9357-9450-4615-b4e7-b670581509af"
                  }
                }
              ]
            },
            {
              "id": "f7b01816-7c4b-45eb-847a-380e1e682efc",
              "name": "IP address in JSON format",
              "request": {
                "url": "https://postman-echo.com/ip",
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "9a31bca9-bf83-4987-8d75-e919eefc839a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0db4705f-9ee7-47a4-a851-15fb3912ba2c",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "execution": "966c9357-9450-4615-b4e7-b670581509af"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionFailure: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:35)",
          "checksum": "2425a743e0cf9af0709c9f2fe838640c",
          "id": "6f070699-b91d-4f0c-90f0-16b4c58c0169",
          "timestamp": 1540933455600,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=1&to=2",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
              }
            }
          ]
        },
        "parent": {
          "id": "794ceabe-36d6-4132-8619-49dac0676ac0",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
                  }
                }
              ]
            },
            {
              "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f1b8d215-ee9b-42fd-af47-9999d52b2fee",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "execution": "5f8658b0-aca6-40d4-a730-629990057fa6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "message": "expected undefined in response to contain property 'info.schema'",
          "stack": "AssertionFailure: expected undefined in response to contain property 'info.schema'\n   at Object.eval sandbox-script.js:2:35)",
          "checksum": "25a72adc53513e9a74ad73af78702575",
          "id": "766e2513-4011-4b3d-bb3c-124abc442911",
          "timestamp": 1540933455602,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=1&to=2",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
              }
            }
          ]
        },
        "parent": {
          "id": "794ceabe-36d6-4132-8619-49dac0676ac0",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
                  }
                }
              ]
            },
            {
              "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f1b8d215-ee9b-42fd-af47-9999d52b2fee",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "execution": "5f8658b0-aca6-40d4-a730-629990057fa6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionFailure: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:36)",
          "checksum": "251999f99a40fadbf34ed0a9364cf241",
          "id": "2976cec6-e374-40ea-be9a-8a534ea34ba1",
          "timestamp": 1540933455706,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=2&to=1",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
              }
            }
          ]
        },
        "parent": {
          "id": "794ceabe-36d6-4132-8619-49dac0676ac0",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
                  }
                }
              ]
            },
            {
              "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc506bdf-5f82-4955-b575-b117d81f84e0",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "execution": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "message": "expected undefined in response to contain property 'folders'",
          "stack": "AssertionFailure: expected undefined in response to contain property 'folders'\n   at Object.eval sandbox-script.js:2:36)",
          "checksum": "5995c87ce5b1c8a0102f14f39bbaf8f7",
          "id": "f2c26ce3-bf55-404d-9c13-b97b1559342d",
          "timestamp": 1540933455708,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": "https://postman-echo.com/transform/collection?from=2&to=1",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
              }
            }
          ]
        },
        "parent": {
          "id": "794ceabe-36d6-4132-8619-49dac0676ac0",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "id": "b574ff7c-883f-4e44-b3de-65263d30dfba",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "fc0df5c2-3a59-4953-b6f9-ede6216f8ae7",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=1&to=2",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "5f8658b0-aca6-40d4-a730-629990057fa6"
                  }
                }
              ]
            },
            {
              "id": "23152c95-a77d-40e6-8e64-ab79aecd5c11",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "5bd5b200-2f47-41cc-9a72-29be93060416",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": "https://postman-echo.com/transform/collection?from=2&to=1",
                    "method": "POST",
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc506bdf-5f82-4955-b575-b117d81f84e0",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "execution": "42813f3e-045e-493d-aa22-9b9bd0ebcbc1"
        }
      }
    ],
    "error": null
  }
}